<feed>
    <title>Planet Clojure</title>
    <link rel="self" href="http://planet.clojure.in/atom.xml"/>
    <link href="http://planet.clojure.in/"/>
    <id>http://planet.clojure.in/atom.xml</id>
    <updated>2021-12-03T21:05:46+00:00</updated>
    <generator uri="http://www.planetplanet.org/">http://intertwingly.net/code/venus/</generator>

    <entry>
        <title type="html" xml:lang="en-us">Advent of Code: Day 3</title>
        <link href="https://andreyorst.gitlab.io/posts/2021-12-03-advent-of-code-day-3/"/>
        <id>https://andreyorst.gitlab.io/posts/2021-12-03-advent-of-code-day-3/</id>
        <updated>2021-12-03T19:33:00+00:00</updated>
        <content type="html">&lt;p&gt;So far the event went pretty straightforward!
            The tasks were simple but interesting.
            Looking at other people’s solutions, I’m starting to feel that I’m overgeneralizing things quite often.
            But I think it’s a good thing, as I can see and highlight the points I need to improve!&lt;/p&gt;
            &lt;h2 id=&quot;binary-diagnostic&quot;&gt;Binary Diagnostic&lt;/h2&gt;
            &lt;p&gt;Today’s task is once again themed around the submarine, we’re using to find the keys.
            But today we need to perform diagnostics of the submarine systems.
            The diagnostics came as the following example input:&lt;/p&gt;
            &lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;00100
            11110
            10110
            10111
            10101
            01111
            00111
            11100
            10000
            11001
            00010
            01010
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It’s a list of binary numbers, and we need to work with those via a specific set of rules.&lt;/p&gt;
            &lt;p&gt;First, we need to take only the first column of each row, and count how many zeroes and ones are there to compute the most common bit.
            In the case of the first column, there are seven ones, and five zeroes, and the most common bit is &lt;code&gt;1&lt;/code&gt;.
            We need to repeat that for each column, and the resulting bits will be the number we’re looking for.
            Let’s prepare the data.&lt;/p&gt;
            &lt;p&gt;For the data format, I think a sequence of vectors of integers will do.
            We can transform the test input string to such format as follows:&lt;/p&gt;
            &lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day2&amp;gt;&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;ns &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day3&lt;/span&gt;)
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;nil&lt;/span&gt;
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day3&amp;gt;&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;require&lt;/span&gt; '[&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;aoc-commons&lt;/span&gt; &lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;:refer&lt;/span&gt; [&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;parse-long&lt;/span&gt;]]
            '[&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;clojure.string&lt;/span&gt; &lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;:as&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;str&lt;/span&gt;])
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;nil&lt;/span&gt;
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day3&amp;gt;&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;00100\n11110\n10110\n10111\n10101\n01111\n00111\n11100\n10000\n11001\n00010\n01010&quot;&lt;/span&gt;
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;str/split-lines&lt;/span&gt;
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;map &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;seq&lt;/span&gt;)
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;map &lt;/span&gt;#(&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;mapv&lt;/span&gt; (&lt;span style=&quot;font-weight: bold;&quot;&gt;fn &lt;/span&gt;[&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;c&lt;/span&gt;] (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;parse-long&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;str &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;c&lt;/span&gt;))) &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;%&lt;/span&gt;)))
            ([0 0 1 0 0]
            [1 1 1 1 0]
            [1 0 1 1 0]
            [1 0 1 1 1]
            [1 0 1 0 1]
            [0 1 1 1 1]
            [0 0 1 1 1]
            [1 1 1 0 0]
            [1 0 0 0 0]
            [1 1 0 0 1]
            [0 0 0 1 0]
            [0 1 0 1 0])
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day3&amp;gt;&lt;/span&gt; (&lt;span style=&quot;font-weight: bold;&quot;&gt;def &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;test-data&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;*1&lt;/span&gt;)
            #&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;'day3/test-data&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;OK, this appears to look correct.
            Now, we need to write an algorithm that will count bits in the given column:&lt;/p&gt;
            &lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day3&amp;gt;&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;test-data&lt;/span&gt;
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;map &lt;/span&gt;#(&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;get &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;%&lt;/span&gt; 0))
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;sort&lt;/span&gt;
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;split-with &lt;/span&gt;(&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;partial = &lt;/span&gt;0))
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;map &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;count&lt;/span&gt;))
            (5 7)
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This should do it.
            We map the &lt;code&gt;get&lt;/code&gt; function over each of the vectors to get the 0th bit.
            Then, we sort the result, so all zeroes go before all ones, and split it with the &lt;code&gt;(partial = 0)&lt;/code&gt; function, which gives us the result of &lt;code&gt;[(0 0 0 0 0) (1 1 1 1 1 1 1)]&lt;/code&gt;.
            Finally, we &lt;code&gt;map&lt;/code&gt; the &lt;code&gt;count&lt;/code&gt; function, to compute the amount of each bit, producing the final result of &lt;code&gt;(5 7)&lt;/code&gt;.&lt;/p&gt;
            &lt;p&gt;But it’s hard to remember what these numbers are, e.g. you can’t say if there’s &lt;code&gt;5&lt;/code&gt; zeroes of &lt;code&gt;5&lt;/code&gt; ones, by looking at the code.
            Your only hint is a call to &lt;code&gt;sort&lt;/code&gt;, which sorts zeroes before ones, but it’s hard to grasp at a glance, so let’s put this into a table.
            We also need to make &lt;code&gt;0&lt;/code&gt; argument to &lt;code&gt;get&lt;/code&gt; a parameter, so here’s our function:&lt;/p&gt;
            &lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day3&amp;gt;&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;defn &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;count-bits&lt;/span&gt; [&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;bit-n&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;input&lt;/span&gt;]
            (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;input&lt;/span&gt;
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;map &lt;/span&gt;#(&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;get &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;%&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;bit-n&lt;/span&gt;))
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;sort&lt;/span&gt;
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;split-with &lt;/span&gt;(&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;partial = &lt;/span&gt;0))
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;map &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;count&lt;/span&gt;)
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;zipmap &lt;/span&gt;[&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;:ones&lt;/span&gt; &lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;:zeroes&lt;/span&gt;])))
            #&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;'day3/count-bits&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, to get the most common bit we need to &lt;code&gt;map&lt;/code&gt; this function for every index in our vectors.
            To obtain the size of the vector we can &lt;code&gt;count&lt;/code&gt; the &lt;code&gt;first&lt;/code&gt; vector from the input, and use it to create a &lt;code&gt;range&lt;/code&gt;, that we will &lt;code&gt;map&lt;/code&gt; over:&lt;/p&gt;
            &lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day3&amp;gt;&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;defn &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;most-common-bits&lt;/span&gt; [&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;input&lt;/span&gt;]
            (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;input&lt;/span&gt;
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;first&lt;/span&gt;
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;count&lt;/span&gt;
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;range&lt;/span&gt;
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;map &lt;/span&gt;#(&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;count-bits&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;%&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;input&lt;/span&gt;))))
            #&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;'day3/most-common-bits&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Calling this function with our test input produces the following sequence of maps:&lt;/p&gt;
            &lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day3&amp;gt;&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;most-common-bits&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;test-data&lt;/span&gt;)
            ({&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;:ones&lt;/span&gt; 5, &lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;:zeroes&lt;/span&gt; 7}
            {&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;:ones&lt;/span&gt; 7, &lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;:zeroes&lt;/span&gt; 5}
            {&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;:ones&lt;/span&gt; 4, &lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;:zeroes&lt;/span&gt; 8}
            {&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;:ones&lt;/span&gt; 5, &lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;:zeroes&lt;/span&gt; 7}
            {&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;:ones&lt;/span&gt; 7, &lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;:zeroes&lt;/span&gt; 5})
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This appears to be correct, but we’re missing the final step of converting this to a vector of the most common bits.
            To do this, we just need one extra &lt;code&gt;map&lt;/code&gt; over this list, that compares ones and zeroes, and chooses the most common one:&lt;/p&gt;
            &lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day3&amp;gt;&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;defn &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;most-common-bits&lt;/span&gt; [&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;input&lt;/span&gt;]
            (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;input&lt;/span&gt;
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;first&lt;/span&gt;
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;count&lt;/span&gt;
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;range&lt;/span&gt;
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;map &lt;/span&gt;#(&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;count-bits&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;%&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;input&lt;/span&gt;))
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;map &lt;/span&gt;(&lt;span style=&quot;font-weight: bold;&quot;&gt;fn &lt;/span&gt;[{&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;:keys&lt;/span&gt; [&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;zeroes&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;ones&lt;/span&gt;]}]
            (&lt;span style=&quot;font-weight: bold;&quot;&gt;if &lt;/span&gt;(&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;zeroes&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;ones&lt;/span&gt;) 1 0)))))
            #&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;'day3/most-common-bits&lt;/span&gt;
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day3&amp;gt;&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;most-common-bits&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;test-data&lt;/span&gt;)
            (1 0 1 1 0)
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This number is the correct one for the given example input.
            But it’s not it yet.&lt;/p&gt;
            &lt;p&gt;We need to compute another number, which consists of the lest common bits.
            We could change the predicate in the &lt;code&gt;most-common-bits&lt;/code&gt; function, and create the &lt;code&gt;least-common-bits&lt;/code&gt; function, but it would be a waste.
            All we need is to flip all bits in the number we got:&lt;/p&gt;
            &lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day3&amp;gt;&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;defn &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;flip-bit&lt;/span&gt; [&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;b&lt;/span&gt;]
            (&lt;span style=&quot;font-weight: bold;&quot;&gt;if &lt;/span&gt;(&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;= &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;b&lt;/span&gt; 0) 1 0))
            #&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;'day3/flip-bit&lt;/span&gt;
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day3&amp;gt;&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;map &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;flip-bit&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;*2&lt;/span&gt;)
            (0 1 0 0 1)
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And this is indeed the correct number.&lt;/p&gt;
            &lt;p&gt;Finally, we need to compute their product.
            To do so, we need to parse the binary representation into a decimal first.
            Let’s concatenate our lists to string and use default Java method for parsing:&lt;/p&gt;
            &lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day3&amp;gt;&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;* &lt;/span&gt;(&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;Long/parseLong&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;str/join&lt;/span&gt; '(1 0 1 1 0)) 2)
            (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;Long/parseLong&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;str/join&lt;/span&gt; '(0 1 0 0 1)) 2))
            198
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is the correct result.
            Let’s just wrap the whole thing into a function, and test with the real input:&lt;/p&gt;
            &lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day3&amp;gt;&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;defn &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;read-input&lt;/span&gt; []
            (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;inputs/day3&quot;&lt;/span&gt;
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;slurp&lt;/span&gt;
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;str/split-lines&lt;/span&gt;
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;map &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;seq&lt;/span&gt;)
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;map &lt;/span&gt;#(&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;mapv&lt;/span&gt; (&lt;span style=&quot;font-weight: bold;&quot;&gt;fn &lt;/span&gt;[&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;c&lt;/span&gt;] (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;parse-long&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;str &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;c&lt;/span&gt;))) &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;%&lt;/span&gt;))))
            #&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;'day3/read-input&lt;/span&gt;
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day3&amp;gt;&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;defn &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;part-1&lt;/span&gt; [&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;input&lt;/span&gt;]
            (&lt;span style=&quot;font-weight: bold;&quot;&gt;let &lt;/span&gt;[&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;gamma&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;most-common-bits&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;input&lt;/span&gt;)
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;epsilon&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;map &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;flip-bit&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;gamma&lt;/span&gt;)]
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;* &lt;/span&gt;(&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;Long/parseLong&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;str/join&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;gamma&lt;/span&gt;) 2)
            (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;Long/parseLong&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;str/join&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;epsilon&lt;/span&gt;) 2))))
            #&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;'day3/part-1&lt;/span&gt;
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day3&amp;gt;&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;part-1&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;read-input&lt;/span&gt;))
            3885894
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And we got the correct result!
            Time for part two.&lt;/p&gt;
            &lt;h3 id=&quot;part-two&quot;&gt;Part two&lt;/h3&gt;
            &lt;p&gt;Whoa.. that’s a lot of text!
            And numbers…
            Anyway, let’s see what’s up with all of this new information.&lt;/p&gt;
            &lt;p&gt;The idea is that we need to compute two more numbers, but now, we need to filter out some numbers based on a condition.
            To get the first number, we need to determine the most common bit for the given position and keep only such rows, that contain that number in the same position.
            The second number is exactly the same, except we need to use the least common bit.
            Should be pretty easy.
            Let’s start by writing a function, that determines which bit we need to use as criteria for filtering:&lt;/p&gt;
            &lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day3&amp;gt;&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;defn &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;bit-criteria&lt;/span&gt; [&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;type&lt;/span&gt; {&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;:keys&lt;/span&gt; [&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;ones&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;zeroes&lt;/span&gt;]}]
            (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;type&lt;/span&gt;
            &lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;:oxygen&lt;/span&gt; (&lt;span style=&quot;font-weight: bold;&quot;&gt;if &lt;/span&gt;(&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;&amp;lt; &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;zeroes&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;ones&lt;/span&gt;) 0 1)
            &lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;:CO2&lt;/span&gt; (&lt;span style=&quot;font-weight: bold;&quot;&gt;if &lt;/span&gt;(&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;&amp;lt; &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;zeroes&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;ones&lt;/span&gt;) 1 0)))
            #&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;'day3/bit-criteria&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Interestingly enough, the task explicitly mentions, that if we got the same amount of ones and zeroes, we need to choose &lt;code&gt;1&lt;/code&gt; for oxygen, and &lt;code&gt;0&lt;/code&gt; for CO2.
            I haven’t accounted for this case in the first part, and I haven’t even thought about it, to be frank.
            And even though the logic above doesn’t have an explicit check for this case as well, it works perfectly along with the rules:&lt;/p&gt;
            &lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day3&amp;gt;&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;bit-criteria&lt;/span&gt; &lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;:oxygen&lt;/span&gt; {&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;:zeroes&lt;/span&gt; 4 &lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;:ones&lt;/span&gt; 4})
            1
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day3&amp;gt;&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;bit-criteria&lt;/span&gt; &lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;:CO2&lt;/span&gt; {&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;:zeroes&lt;/span&gt; 4 &lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;:ones&lt;/span&gt; 4})
            0
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I’m using the same format as returned by the &lt;code&gt;count-bits&lt;/code&gt; function here.
            Now, all we need is to implement the algorithm:&lt;/p&gt;
            &lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day3&amp;gt;&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;defn &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;calculate&lt;/span&gt; [&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;type&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;input&lt;/span&gt;]
            (&lt;span style=&quot;font-weight: bold;&quot;&gt;let &lt;/span&gt;[&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;total&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;count &lt;/span&gt;(&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;first &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;input&lt;/span&gt;))] &lt;span style=&quot;color: #888; font-style: italic;&quot;&gt;; ①&lt;/span&gt;
            (&lt;span style=&quot;font-weight: bold;&quot;&gt;loop &lt;/span&gt;[&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;n&lt;/span&gt; 0
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;numbers&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;input&lt;/span&gt;]
            (&lt;span style=&quot;font-weight: bold;&quot;&gt;let &lt;/span&gt;[&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;bits&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;count-bits&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;n&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;numbers&lt;/span&gt;)
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;criteria&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;bit-criteria&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;type&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;bits&lt;/span&gt;)             &lt;span style=&quot;color: #888; font-style: italic;&quot;&gt;; ②&lt;/span&gt;
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;res&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;filter &lt;/span&gt;#(&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;= &lt;/span&gt;(&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;get &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;%&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;n&lt;/span&gt;) &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;criteria&lt;/span&gt;) &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;numbers&lt;/span&gt;)] &lt;span style=&quot;color: #888; font-style: italic;&quot;&gt;; ③&lt;/span&gt;
            (&lt;span style=&quot;font-weight: bold;&quot;&gt;if &lt;/span&gt;(&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;= &lt;/span&gt;1 (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;count &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;res&lt;/span&gt;))
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;first &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;res&lt;/span&gt;)
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;when &lt;/span&gt;(&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;&amp;lt; &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;n&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;total&lt;/span&gt;)
            (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;recur&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;inc &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;n&lt;/span&gt;) &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;res&lt;/span&gt;)))))))
            #&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;'day3/calculate&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That’s a lot of code, but the job this function does is pretty simple.
            We compute the total amount of bits we need to check at ①.
            Then we go into the &lt;code&gt;loop&lt;/code&gt;, where we will check each bit &lt;code&gt;n&lt;/code&gt;, starting from &lt;code&gt;0&lt;/code&gt;.
            We count all bits in a given position and compute the &lt;code&gt;criteria&lt;/code&gt; ②.
            Finally, we filter only those rows, that have the same bit as the &lt;code&gt;criteria&lt;/code&gt; bit in the position of &lt;code&gt;n&lt;/code&gt; ③.&lt;/p&gt;
            &lt;p&gt;At this point, we have all rows that match the criteria.
            If we only got 1 row, that’s the result we need.
            If not, we go into the next iteration with the current amount of rows and check the next bit.&lt;/p&gt;
            &lt;p&gt;Let’s plug this into a function, and see if it’s correct for the test input:&lt;/p&gt;
            &lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day3&amp;gt;&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;defn &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;part-2&lt;/span&gt; [&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;input&lt;/span&gt;]
            (&lt;span style=&quot;font-weight: bold;&quot;&gt;let &lt;/span&gt;[&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;oxygen&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;calculate&lt;/span&gt; &lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;:oxygen&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;input&lt;/span&gt;)
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;co2&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;calculate&lt;/span&gt; &lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;:CO2&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;input&lt;/span&gt;)]
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;* &lt;/span&gt;(&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;Long/parseLong&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;str/join&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;oxygen&lt;/span&gt;) 2)
            (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;Long/parseLong&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;str/join&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;co2&lt;/span&gt;) 2))))
            #&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;'day3/part-2&lt;/span&gt;
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day3&amp;gt;&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;part-2&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;test-data&lt;/span&gt;)
            230
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And it is correct!
            Now we can check this with the real input:&lt;/p&gt;
            &lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day3&amp;gt;&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;part-2&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;read-input&lt;/span&gt;))
            4375225
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And we get another gold star, as this is the right answer for my input!&lt;/p&gt;
            &lt;h2 id=&quot;day-3-thoughts&quot;&gt;Day 3 thoughts&lt;/h2&gt;
            &lt;p&gt;Definitively was a bit harder than the previous day, but still a lot of fun!
            After I looked at my solution at the end of the day, I’ve realized that it wasn’t necessary to convert strings to numbers, as I could compare everything that way.
            But it wasn’t too much extra works, so that’s that.&lt;/p&gt;
            &lt;p&gt;Overall, I think my code is a bit complex, but I’m not sure how to improve it.
            Funnily enough, while writing this I’ve noticed that the implementation of &lt;code&gt;most-common-bits&lt;/code&gt; was wrong, as I’ve used &lt;code&gt;&amp;lt;&lt;/code&gt; instead of &lt;code&gt;&amp;gt;&lt;/code&gt;, but the resulting answer was still correct, as the second number is just the inverse of the first one.
            That’s all for now, and see you the next day!&lt;/p&gt;</content>
        <author>
            <name>Andrey Listopadov</name>
            <uri>https://andreyorst.gitlab.io/</uri>
        </author>
        <source>
            <title type="html">Andrey Listopadov</title>
            <subtitle type="html">Posts from Andrey Listopadov</subtitle>
            <link rel="self" href="https://andreyorst.gitlab.io/feed.xml"/>
            <id>https://andreyorst.gitlab.io/</id>
            <rights type="html">Andrey Listopadov 2020-2021 - This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</rights>
        </source>
    </entry>

    <entry>
        <title type="html" xml:lang="en">🚀10 Trending projects on GitHub for web developers - 3rd December 2021</title>
        <link href="https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-3rd-december-2021-12f5"/>
        <id>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-3rd-december-2021-12f5</id>
        <updated>2021-12-03T19:15:48+00:00</updated>
        <content type="html">&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href=&quot;https://stargazing.dev/&quot;&gt;Stargazing.dev&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

            &lt;h3&gt;
            &lt;a href=&quot;https://dev.to/feed#1-open-props&quot;&gt;
            &lt;/a&gt;
            1. Open Props
            &lt;/h3&gt;

            &lt;p&gt;CSS custom properties to help accelerate adaptive and consistent design. Useful in any framework&lt;/p&gt;


            &lt;div class=&quot;ltag-github-readme-tag&quot;&gt;
            &lt;div class=&quot;readme-overview&quot;&gt;
            &lt;h2&gt;
            &lt;img alt=&quot;GitHub logo&quot; src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg&quot; /&gt;
            &lt;a href=&quot;https://github.com/argyleink&quot;&gt;
            argyleink
            &lt;/a&gt; / &lt;a href=&quot;https://github.com/argyleink/open-props&quot;&gt;
            open-props
            &lt;/a&gt;
            &lt;/h2&gt;
            &lt;h3&gt;
            CSS custom properties to help accelerate adaptive and consistent design.
            &lt;/h3&gt;
            &lt;/div&gt;
            &lt;div class=&quot;ltag-github-body&quot;&gt;

            &lt;div class=&quot;md&quot; id=&quot;readme&quot;&gt;
            &lt;div&gt;
            &lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/1134620/141246730-7df4cf2a-6249-42ca-a01b-494c3ccddabe.png&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img alt=&quot;Frame 2&quot; src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--JgczIvib--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1134620/141246730-7df4cf2a-6249-42ca-a01b-494c3ccddabe.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
            &lt;h2&gt;
            Open Source CSS Variables&lt;/h2&gt;
            &lt;p&gt;&lt;code&gt;gradients&lt;/code&gt; &lt;code&gt;animations&lt;/code&gt; &lt;code&gt;sizes&lt;/code&gt; &lt;code&gt;easings&lt;/code&gt; &lt;code&gt;colors&lt;/code&gt; &lt;code&gt;shadows&lt;/code&gt; &lt;code&gt;aspect-ratios&lt;/code&gt; &lt;code&gt;z-indexes&lt;/code&gt;&lt;/p&gt;
            &lt;p&gt;&lt;a href=&quot;https://github.com/argyleink/open-props/actions/workflows/tests.yml&quot;&gt;&lt;img alt=&quot;Tests&quot; src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--gP2nbRWn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/argyleink/open-props/actions/workflows/tests.yml/badge.svg%3Fbranch%3Dmain&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
            &lt;br /&gt;
            &lt;h3&gt;
            Need help?   👉   &lt;a href=&quot;https://discord.gg/AqA4fU886r&quot; rel=&quot;nofollow&quot;&gt;Discord&lt;/a&gt;
            &lt;/h3&gt;
            &lt;/div&gt;
            &lt;br /&gt;
            &lt;h4&gt;
            CDN&lt;/h4&gt;
            &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;https://unpkg.com/open-props&quot; rel=&quot;nofollow&quot;&gt;https://unpkg.com/open-props&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h4&gt;
            CLI&lt;/h4&gt;
            &lt;ul&gt;
            &lt;li&gt;
            &lt;code&gt;npm run gen:op&lt;/code&gt; - runs through &lt;code&gt;src/&lt;/code&gt; js files and creates the PostCSS files in &lt;code&gt;src/&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;code&gt;npm run gen:nowhere&lt;/code&gt;  - creates a version of Open Props without the use of &lt;code&gt;:where()&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;code&gt;npm run gen:prefixed&lt;/code&gt; - creates a version of Open Props with each prop prefixed with &lt;code&gt;op&lt;/code&gt;, like &lt;code&gt;--op-font-size-1&lt;/code&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;code&gt;npm run bundle&lt;/code&gt; - creates all the various minified bundles of props&lt;/li&gt;
            &lt;li&gt;
            &lt;code&gt;npm run lib:js&lt;/code&gt; - builds the JS modules for NPM&lt;/li&gt;
            &lt;/ul&gt;
            &lt;/div&gt;



            &lt;/div&gt;
            &lt;br /&gt;
            &lt;div class=&quot;gh-btn-container&quot;&gt;&lt;a class=&quot;gh-btn&quot; href=&quot;https://github.com/argyleink/open-props&quot;&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
            &lt;br /&gt;
            &lt;/div&gt;
            &lt;br /&gt;





            &lt;h3&gt;
            &lt;a href=&quot;https://dev.to/feed#2-pollyjs&quot;&gt;
            &lt;/a&gt;
            2. Polly.JS
            &lt;/h3&gt;

            &lt;p&gt;Record, Replay, and Stub HTTP Interactions. A standalone, framework-agnostic JavaScript library that enables recording, replaying, and stubbing of HTTP interactions.  &lt;/p&gt;


            &lt;div class=&quot;ltag-github-readme-tag&quot;&gt;
            &lt;div class=&quot;readme-overview&quot;&gt;
            &lt;h2&gt;
            &lt;img alt=&quot;GitHub logo&quot; src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg&quot; /&gt;
            &lt;a href=&quot;https://github.com/Netflix&quot;&gt;
            Netflix
            &lt;/a&gt; / &lt;a href=&quot;https://github.com/Netflix/pollyjs&quot;&gt;
            pollyjs
            &lt;/a&gt;
            &lt;/h2&gt;
            &lt;h3&gt;
            Record, Replay, and Stub HTTP Interactions.
            &lt;/h3&gt;
            &lt;/div&gt;
            &lt;div class=&quot;ltag-github-body&quot;&gt;

            &lt;div class=&quot;md&quot; id=&quot;readme&quot;&gt;
            &lt;p&gt;
            &lt;a href=&quot;https://camo.githubusercontent.com/265fae5d3f6c389cde92b01a2a25ffd3ca81e3830f5a52275119e878e7783aa3/68747470733a2f2f6e6574666c69782e6769746875622e696f2f706f6c6c796a732f6173736574732f696d616765732f776f72646d61726b2d6c6f676f2d616c742e706e67&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img alt=&quot;Polly.JS&quot; src=&quot;https://camo.githubusercontent.com/265fae5d3f6c389cde92b01a2a25ffd3ca81e3830f5a52275119e878e7783aa3/68747470733a2f2f6e6574666c69782e6769746875622e696f2f706f6c6c796a732f6173736574732f696d616765732f776f72646d61726b2d6c6f676f2d616c742e706e67&quot; width=&quot;400px&quot; /&gt;&lt;/a&gt;
            &lt;/p&gt;

            &lt;h2&gt;
            Record, Replay, and Stub HTTP Interactions&lt;/h2&gt;

            &lt;p&gt;&lt;a href=&quot;https://travis-ci.com/Netflix/pollyjs&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;Build Status&quot; src=&quot;https://camo.githubusercontent.com/a806184d550045b6edce9ec7bb7bd9e2002b4800125ab24978346e39a4d99a4c/68747470733a2f2f7472617669732d63692e636f6d2f4e6574666c69782f706f6c6c796a732e7376673f6272616e63683d6d6173746572&quot; /&gt;&lt;/a&gt;
            &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;license&quot; src=&quot;https://camo.githubusercontent.com/09f8ccb66f9ad5e1961259747f2ae4e2acfaa0e107d59d61f17ef9fa7e7a5d1e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f4e6574666c69782f706f6c6c796a732e737667&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
            &lt;p&gt;Polly.JS is a standalone, framework-agnostic JavaScript library that enables recording, replaying, and stubbing of HTTP interactions. By tapping into multiple request APIs across both Node &amp;amp; the browser, Polly.JS is able to mock requests and responses with little to no configuration while giving you the ability to take full control of each request with a simple, powerful, and intuitive API.&lt;/p&gt;
            &lt;blockquote&gt;
            &lt;p&gt;Interested in contributing or just seeing Polly in action? Head over to &lt;a href=&quot;https://github.com/Netflix/pollyjsCONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; to learn how to spin up the project!&lt;/p&gt;
            &lt;/blockquote&gt;
            &lt;h2&gt;
            Why Polly?&lt;/h2&gt;
            &lt;p&gt;Keeping fixtures and factories in parity with your APIs can be a time consuming process
            Polly alleviates this process by recording and maintaining actual server responses while also staying flexible.&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt;Record your test suite's HTTP interactions and replay them during future test runs for fast, deterministic, accurate tests.&lt;/li&gt;
            &lt;li&gt;Use Polly's client-side server to modify or intercept requests and responses to simulate…&lt;/li&gt;
            &lt;/ul&gt;
            &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;gh-btn-container&quot;&gt;&lt;a class=&quot;gh-btn&quot; href=&quot;https://github.com/Netflix/pollyjs&quot;&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
            &lt;/div&gt;





            &lt;h3&gt;
            &lt;a href=&quot;https://dev.to/feed#3-awesome-advent-of-code&quot;&gt;
            &lt;/a&gt;
            3. Awesome Advent of Code
            &lt;/h3&gt;

            &lt;p&gt;A collection of awesome resources related to the yearly Advent of Code challenge.&lt;/p&gt;


            &lt;div class=&quot;ltag-github-readme-tag&quot;&gt;
            &lt;div class=&quot;readme-overview&quot;&gt;
            &lt;h2&gt;
            &lt;img alt=&quot;GitHub logo&quot; src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg&quot; /&gt;
            &lt;a href=&quot;https://github.com/Bogdanp&quot;&gt;
            Bogdanp
            &lt;/a&gt; / &lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code&quot;&gt;
            awesome-advent-of-code
            &lt;/a&gt;
            &lt;/h2&gt;
            &lt;h3&gt;
            A collection of awesome resources related to the yearly Advent of Code challenge.
            &lt;/h3&gt;
            &lt;/div&gt;
            &lt;div class=&quot;ltag-github-body&quot;&gt;

            &lt;div class=&quot;md&quot; id=&quot;readme&quot;&gt;
            &lt;h1&gt;
            Awesome Advent of Code&lt;/h1&gt;
            &lt;p&gt;This is a collection of awesome resources related to the yearly
            &lt;a href=&quot;https://adventofcode.com/&quot; rel=&quot;nofollow&quot;&gt;Advent of Code&lt;/a&gt; challenge.&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;https://adventofcode.com/&quot; rel=&quot;nofollow&quot;&gt;The Official AoC Website&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/adventofcode/&quot; rel=&quot;nofollow&quot;&gt;The AoC Subreddit&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#project-templates&quot;&gt;Project Templates&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#tools-and-utilities&quot;&gt;Tools and Utilities&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#other-advent-calendars&quot;&gt;Other Advent Calendars&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code/2018.md&quot;&gt;2018&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code/2019.md&quot;&gt;2019&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code/2020.md&quot;&gt;2020&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#2021&quot;&gt;2021&lt;/a&gt;
            &lt;ul&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#solutions&quot;&gt;Solutions&lt;/a&gt;
            &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#ada&quot;&gt;Ada&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#assembly&quot;&gt;Assembly&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#awk&quot;&gt;AWK&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#Bash&quot;&gt;Bash&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#c&quot;&gt;C&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#c-1&quot;&gt;C#&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#c-2&quot;&gt;C++&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#clojure&quot;&gt;Clojure&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#common-lisp&quot;&gt;Common Lisp&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#crystal&quot;&gt;Crystal&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#d&quot;&gt;D&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#dart&quot;&gt;Dart&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#elixir&quot;&gt;Elixir&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#elm&quot;&gt;Elm&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#erlang&quot;&gt;Erlang&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#excel&quot;&gt;Excel&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#f&quot;&gt;F#&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#go&quot;&gt;Go&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#groovy&quot;&gt;Groovy&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#hamler&quot;&gt;Hamler&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#haskell&quot;&gt;Haskell&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#haxe&quot;&gt;Haxe&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#idris&quot;&gt;Idris&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#J&quot;&gt;J&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#java&quot;&gt;Java&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#javascript&quot;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#jq&quot;&gt;jq&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#julia&quot;&gt;Julia&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#kotlin&quot;&gt;Kotlin&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#ldpl&quot;&gt;LDPL&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#lua&quot;&gt;Lua&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#matlab&quot;&gt;MATLAB&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#nim&quot;&gt;Nim&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#objc&quot;&gt;Objective-C&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#ocaml&quot;&gt;OCaml&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#php&quot;&gt;PHP&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#perl&quot;&gt;Perl&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#pony&quot;&gt;Pony&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#powershell&quot;&gt;PowerShell&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#prolog&quot;&gt;Prolog&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#python&quot;&gt;Python&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#r&quot;&gt;R&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#racket&quot;&gt;Racket&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#raku&quot;&gt;Raku&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#reasonml&quot;&gt;ReasonML&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#red&quot;&gt;Red&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#ruby&quot;&gt;Ruby&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#rust&quot;&gt;Rust&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#smalltalk&quot;&gt;Smalltalk&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#scala&quot;&gt;Scala&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#scheme&quot;&gt;Scheme&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#solidity&quot;&gt;Solidity&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#spectx&quot;&gt;SpectX&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#sql&quot;&gt;SQL&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#swift&quot;&gt;Swift&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#typescript&quot;&gt;TypeScript&lt;/a&gt;
            &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#deno&quot;&gt;Deno&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#unison&quot;&gt;Unison&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#vbnet&quot;&gt;VB.NET&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#whitespace&quot;&gt;Whitespace&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#zig&quot;&gt;Zig&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/awesome-advent-of-code#live-streams&quot;&gt;Live Streams&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;/li&gt;
            &lt;/ul&gt;

            &lt;h2&gt;
            Project Templates&lt;/h2&gt;
            &lt;p&gt;&lt;em&gt;Templates, cookiecutters and skeletons for quickly setting up projects
            in your favourite language.&lt;/em&gt;&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/ManasJayanth/reason-aoc-starter&quot;&gt;Reason Starter kit for Advent of Code&lt;/a&gt; &lt;em&gt;(Reason and OCaml)&lt;/em&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/dave-burke/advent-of-code-java-starter&quot;&gt;dave-burke/advent-of-code-java-starter&lt;/a&gt; &lt;em&gt;(Java)&lt;/em&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/gobanos/cargo-aoc&quot;&gt;gobanos/cargo-aoc&lt;/a&gt; &lt;em&gt;(Rust)&lt;/em&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/nickyvanurk/advent-of-code-rust-template&quot;&gt;nickyvanurk/advent-of-code-rust-template&lt;/a&gt; &lt;em&gt;(Rust)&lt;/em&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/hughjdavey/aoc-kotlin-starter&quot;&gt;hughjdavey/aoc-kotlin-starter&lt;/a&gt; &lt;em&gt;(Kotlin)&lt;/em&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/kindermoumoute/adventofcode/tree/master/template&quot;&gt;kindermoumoute/adventofcode&lt;/a&gt; &lt;em&gt;(Go)&lt;/em&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/staylorwr/elixir_aoc&quot;&gt;staylorwr/elixir_aoc&lt;/a&gt; &lt;em&gt;(Elixir)&lt;/em&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/mhanberg/advent-of-code-elixir-starter&quot;&gt;mhanberg/advent-of-code-elixir-starter&lt;/a&gt; &lt;em&gt;(Elixir)&lt;/em&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/AlexeSimon/adventofcode&quot;&gt;AlexeSimon/adventofcode&lt;/a&gt; &lt;em&gt;(Python)&lt;/em&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/UncleCJ/advent-of-code&quot;&gt;UncleCJ/advent-of-code&lt;/a&gt; &lt;em&gt;(Jupyter Python Notebooks)&lt;/em&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/sindrekjr/AdventOfCodeBase&quot;&gt;sindrekjr/AdventOfCodeBase&lt;/a&gt; &lt;em&gt;(C#)&lt;/em&gt;
            &lt;/li&gt;
            &lt;li&gt;…&lt;/li&gt;
            &lt;/ul&gt;
            &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;gh-btn-container&quot;&gt;&lt;a class=&quot;gh-btn&quot; href=&quot;https://github.com/Bogdanp/awesome-advent-of-code&quot;&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
            &lt;/div&gt;





            &lt;h3&gt;
            &lt;a href=&quot;https://dev.to/feed#4-posthog&quot;&gt;
            &lt;/a&gt;
            4. PostHog
            &lt;/h3&gt;

            &lt;p&gt;PostHog is an open-source product analytics suite, built for developers. Automate the collection of every event on your website or app, with no need to send data to third-parties.&lt;/p&gt;


            &lt;div class=&quot;ltag-github-readme-tag&quot;&gt;
            &lt;div class=&quot;readme-overview&quot;&gt;
            &lt;h2&gt;
            &lt;img alt=&quot;GitHub logo&quot; src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg&quot; /&gt;
            &lt;a href=&quot;https://github.com/PostHog&quot;&gt;
            PostHog
            &lt;/a&gt; / &lt;a href=&quot;https://github.com/PostHog/posthog&quot;&gt;
            posthog
            &lt;/a&gt;
            &lt;/h2&gt;
            &lt;h3&gt;
            🦔 PostHog provides open-source product analytics that you can self-host.
            &lt;/h3&gt;
            &lt;/div&gt;
            &lt;div class=&quot;ltag-github-body&quot;&gt;

            &lt;div class=&quot;md&quot; id=&quot;readme&quot;&gt;
            &lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/65415371/124739522-d8393d00-df11-11eb-9741-820955887d21.png&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--U3zeLgJh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65415371/124739522-d8393d00-df11-11eb-9741-820955887d21.png&quot; width=&quot;1000px&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
            &lt;a href=&quot;https://posthog.com/contributors&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/dd7848408adb5010ee29e995455255edb1ce558a93e6b886a644d3d4f4b8b514/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f616c6c5f636f6e7472696275746f72732d3139302d6f72616e67652e7376673f7374796c653d666c61742d737175617265&quot; /&gt;&lt;/a&gt;
            &lt;br /&gt;
            &lt;p&gt;PostHog is an open-source product analytics suite, built for developers. Automate the collection of every event on your website or app, with no need to send data to third-parties.&lt;/p&gt;
            &lt;p&gt;You can deploy on your own infrastructure, and PostHog plays nicely with data warehouses through plugins for import, transformation, and export.&lt;/p&gt;

            &lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/65415371/124739629-f43cde80-df11-11eb-9033-c5d1d7194f03.png&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--tP8FLHKD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65415371/124739629-f43cde80-df11-11eb-9033-c5d1d7194f03.png&quot; width=&quot;50px&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
            &lt;h2&gt;
            Quick start&lt;/h2&gt;
            &lt;p&gt;It's easy and free to get started.&lt;/p&gt;
            &lt;p&gt;&lt;a href=&quot;https://posthog.com/docs/self-host/overview#deploy&quot; rel=&quot;nofollow&quot;&gt;Deploy PostHog Self-Hosted&lt;/a&gt; in your existing infrastructure.&lt;/p&gt;
            &lt;p&gt;... or use &lt;a href=&quot;https://app.posthog.com/signup&quot; rel=&quot;nofollow&quot;&gt;PostHog Cloud&lt;/a&gt; if you don't need to self-host.&lt;/p&gt;

            &lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/65415371/124739888-2cdcb800-df12-11eb-8952-5be64764a7aa.png&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--ajWBwkTA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65415371/124739888-2cdcb800-df12-11eb-8952-5be64764a7aa.png&quot; width=&quot;50px&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
            &lt;h2&gt;
            Features&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt;
            &lt;strong&gt;Event-based&lt;/strong&gt; analytics at a user level - capture your product's usage data to see which users are doing what in your application.&lt;/li&gt;
            &lt;li&gt;
            &lt;strong&gt;Product data visualizations&lt;/strong&gt;: &lt;a href=&quot;https://posthog.com/docs/features/trends&quot; rel=&quot;nofollow&quot;&gt;graphs&lt;/a&gt;, &lt;a href=&quot;https://posthog.com/docs/features/funnels&quot; rel=&quot;nofollow&quot;&gt;funnels&lt;/a&gt;, &lt;a href=&quot;https://posthog.com/docs/features/cohorts&quot; rel=&quot;nofollow&quot;&gt;user cohorts&lt;/a&gt;, &lt;a href=&quot;https://posthog.com/docs/features/paths&quot; rel=&quot;nofollow&quot;&gt;user paths&lt;/a&gt;, &lt;a href=&quot;https://posthog.com/docs/features/retention&quot; rel=&quot;nofollow&quot;&gt;retention tables&lt;/a&gt;, and &lt;a href=&quot;https://posthog.com/docs/features/dashboards&quot; rel=&quot;nofollow&quot;&gt;dashboards&lt;/a&gt;.&lt;/li&gt;
            &lt;li&gt;
            &lt;strong&gt;Complete control&lt;/strong&gt; over your data - &lt;a href=&quot;https://posthog.com/docs/self-host/overview#deploy&quot; rel=&quot;nofollow&quot;&gt;host it yourself&lt;/a&gt; in any infrastructure.&lt;/li&gt;
            &lt;li&gt;
            &lt;strong&gt;Session recording&lt;/strong&gt; to &lt;a href=&quot;https://posthog.com/docs/features/session-recording&quot; rel=&quot;nofollow&quot;&gt;watch videos&lt;/a&gt; of your users' behavior, with fine-grained privacy controls.&lt;/li&gt;
            &lt;li&gt;
            &lt;strong&gt;Automatically capture&lt;/strong&gt; &lt;a href=&quot;https://posthog.com/docs/features/actions&quot; rel=&quot;nofollow&quot;&gt;clicks and pageviews&lt;/a&gt;…&lt;/li&gt;
            &lt;/ul&gt;
            &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;gh-btn-container&quot;&gt;&lt;a class=&quot;gh-btn&quot; href=&quot;https://github.com/PostHog/posthog&quot;&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
            &lt;/div&gt;





            &lt;h3&gt;
            &lt;a href=&quot;https://dev.to/feed#5-markdownit&quot;&gt;
            &lt;/a&gt;
            5. markdown-it
            &lt;/h3&gt;

            &lt;p&gt;Markdown parser, done right. 100% CommonMark support, extensions, syntax plugins &amp;amp; high speed&lt;/p&gt;


            &lt;div class=&quot;ltag-github-readme-tag&quot;&gt;
            &lt;div class=&quot;readme-overview&quot;&gt;
            &lt;h2&gt;
            &lt;img alt=&quot;GitHub logo&quot; src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg&quot; /&gt;
            &lt;a href=&quot;https://github.com/markdown-it&quot;&gt;
            markdown-it
            &lt;/a&gt; / &lt;a href=&quot;https://github.com/markdown-it/markdown-it&quot;&gt;
            markdown-it
            &lt;/a&gt;
            &lt;/h2&gt;
            &lt;h3&gt;
            Markdown parser, done right. 100% CommonMark support, extensions, syntax plugins &amp;amp; high speed
            &lt;/h3&gt;
            &lt;/div&gt;
            &lt;div class=&quot;ltag-github-body&quot;&gt;

            &lt;div class=&quot;md&quot; id=&quot;readme&quot;&gt;
            &lt;h1&gt;
            markdown-it &lt;/h1&gt;
            &lt;p&gt;&lt;a href=&quot;https://github.com/markdown-it/markdown-it/actions&quot;&gt;&lt;img alt=&quot;CI&quot; src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--wKtX86pt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markdown-it/markdown-it/workflows/CI/badge.svg&quot; /&gt;&lt;/a&gt;
            &lt;a href=&quot;https://www.npmjs.org/package/markdown-it&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;NPM version&quot; src=&quot;https://camo.githubusercontent.com/399fafd115abfdcd085097ca2974f95951909294d22f2babef8f4633e95cedf5/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f6d61726b646f776e2d69742e7376673f7374796c653d666c6174&quot; /&gt;&lt;/a&gt;
            &lt;a href=&quot;https://coveralls.io/github/markdown-it/markdown-it?branch=master&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;Coverage Status&quot; src=&quot;https://camo.githubusercontent.com/c90ad86d6172fb930cdbbf2ec719a8f96a6ff564d2218ab636c5b25aae920c94/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6d61726b646f776e2d69742f6d61726b646f776e2d69742f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562&quot; /&gt;&lt;/a&gt;
            &lt;a href=&quot;https://gitter.im/markdown-it/markdown-it&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;Gitter&quot; src=&quot;https://camo.githubusercontent.com/5dbac0213da25c445bd11f168587c11a200ba153ef3014e8408e462e410169b3/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
            &lt;blockquote&gt;
            &lt;p&gt;Markdown parser done right. Fast and easy to extend.&lt;/p&gt;
            &lt;/blockquote&gt;
            &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://markdown-it.github.io&quot; rel=&quot;nofollow&quot;&gt;Live demo&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt;Follows the &lt;strong&gt;&lt;a href=&quot;http://spec.commonmark.org/&quot; rel=&quot;nofollow&quot;&gt;CommonMark spec&lt;/a&gt;&lt;/strong&gt; + adds syntax extensions &amp;amp; sugar (URL autolinking, typographer).&lt;/li&gt;
            &lt;li&gt;Configurable syntax! You can add new rules and even replace existing ones.&lt;/li&gt;
            &lt;li&gt;High speed.&lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/markdown-it/markdown-it/tree/master/docs/security.md&quot;&gt;Safe&lt;/a&gt; by default.&lt;/li&gt;
            &lt;li&gt;Community-written &lt;strong&gt;&lt;a href=&quot;https://www.npmjs.org/browse/keyword/markdown-it-plugin&quot; rel=&quot;nofollow&quot;&gt;plugins&lt;/a&gt;&lt;/strong&gt; and &lt;a href=&quot;https://www.npmjs.org/browse/keyword/markdown-it&quot; rel=&quot;nofollow&quot;&gt;other packages&lt;/a&gt; on npm.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;strong&gt;Table of content&lt;/strong&gt;&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/markdown-it/markdown-it#install&quot;&gt;Install&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/markdown-it/markdown-it#usage-examples&quot;&gt;Usage examples&lt;/a&gt;
            &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/markdown-it/markdown-it#simple&quot;&gt;Simple&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/markdown-it/markdown-it#init-with-presets-and-options&quot;&gt;Init with presets and options&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/markdown-it/markdown-it#plugins-load&quot;&gt;Plugins load&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/markdown-it/markdown-it#syntax-highlighting&quot;&gt;Syntax highlighting&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/markdown-it/markdown-it#linkify&quot;&gt;Linkify&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/markdown-it/markdown-it#api&quot;&gt;API&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/markdown-it/markdown-it#syntax-extensions&quot;&gt;Syntax extensions&lt;/a&gt;
            &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/markdown-it/markdown-it#manage-rules&quot;&gt;Manage rules&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/markdown-it/markdown-it#benchmark&quot;&gt;Benchmark&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/markdown-it/markdown-it#markdown-it-for-enterprise&quot;&gt;markdown-it for enterprise&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/markdown-it/markdown-it#authors&quot;&gt;Authors&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/markdown-it/markdown-it#references--thanks&quot;&gt;References / Thanks&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;
            Install&lt;/h2&gt;
            &lt;p&gt;&lt;strong&gt;node.js&lt;/strong&gt;:&lt;/p&gt;
            &lt;div class=&quot;highlight highlight-source-shell position-relative overflow-auto js-code-highlight&quot;&gt;
            &lt;pre&gt;npm install markdown-it --save&lt;/pre&gt;

            &lt;/div&gt;
            &lt;p&gt;&lt;strong&gt;browser (CDN):&lt;/strong&gt;&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;http://www.jsdelivr.com/#!markdown-it&quot; rel=&quot;nofollow&quot; title=&quot;jsDelivr CDN&quot;&gt;jsDeliver CDN&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://cdnjs.com/libraries/markdown-it&quot; rel=&quot;nofollow&quot; title=&quot;cdnjs.com&quot;&gt;cdnjs.com CDN&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;
            Usage examples&lt;/h2&gt;
            &lt;p&gt;See also:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt;
            &lt;strong&gt;&lt;a href=&quot;https://markdown-it.github.io/markdown-it/&quot; rel=&quot;nofollow&quot;&gt;API documentation&lt;/a&gt;&lt;/strong&gt; - for more
            info and examples.&lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/markdown-it/markdown-it/tree/master/docs&quot;&gt;Development info&lt;/a&gt; -
            for plugins writers.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h3&gt;
            Simple&lt;/h3&gt;
            &lt;div class=&quot;highlight highlight-source-js position-relative overflow-auto js-code-highlight&quot;&gt;
            &lt;pre&gt;&lt;span class=&quot;pl-c&quot;&gt;// node.js, &quot;classic&quot; way:&lt;/span&gt;
            &lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;MarkdownIt&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt;'markdown-it'&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;pl-s1&quot;&gt;md&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;MarkdownIt&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;md&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt;'# markdown-it rulezz!'&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;pl-c&quot;&gt;// node.js, the same, but with sugar:&lt;/span&gt;
            &lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt;&lt;/pre&gt;…
            &lt;/div&gt;
            &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;gh-btn-container&quot;&gt;&lt;a class=&quot;gh-btn&quot; href=&quot;https://github.com/markdown-it/markdown-it&quot;&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
            &lt;/div&gt;





            &lt;h3&gt;
            &lt;a href=&quot;https://dev.to/feed#6-twojs&quot;&gt;
            &lt;/a&gt;
            6. Two.js
            &lt;/h3&gt;

            &lt;p&gt;A two-dimensional drawing api meant for modern browsers. It is renderer agnostic enabling the same api to render in multiple contexts: webgl, canvas2d, and svg.&lt;/p&gt;


            &lt;div class=&quot;ltag-github-readme-tag&quot;&gt;
            &lt;div class=&quot;readme-overview&quot;&gt;
            &lt;h2&gt;
            &lt;img alt=&quot;GitHub logo&quot; src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg&quot; /&gt;
            &lt;a href=&quot;https://github.com/jonobr1&quot;&gt;
            jonobr1
            &lt;/a&gt; / &lt;a href=&quot;https://github.com/jonobr1/two.js&quot;&gt;
            two.js
            &lt;/a&gt;
            &lt;/h2&gt;
            &lt;h3&gt;
            A renderer agnostic two-dimensional drawing api for the web.
            &lt;/h3&gt;
            &lt;/div&gt;
            &lt;div class=&quot;ltag-github-body&quot;&gt;

            &lt;div class=&quot;md&quot; id=&quot;readme&quot;&gt;
            &lt;h1&gt;
            Two.js&lt;/h1&gt;
            &lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/two.js&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;NPM Package&quot; src=&quot;https://camo.githubusercontent.com/901fe719b63c7e568c2518ee24e63d6181e898a85bf1b41eddf83925c29e6866/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f74776f2e6a73&quot; /&gt;&lt;/a&gt;
            &lt;a href=&quot;https://bundlephobia.com/result?p=two.js&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;Build Size&quot; src=&quot;https://camo.githubusercontent.com/48224e3bee5107d52a17ffdb91e29d783cffc5bb5e4beefae2a66746f32ef762/68747470733a2f2f62616467656e2e6e65742f62756e646c6570686f6269612f6d696e7a69702f74776f2e6a73&quot; /&gt;&lt;/a&gt;
            &lt;a href=&quot;https://www.npmtrends.com/two.js&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;NPM Downloads&quot; src=&quot;https://camo.githubusercontent.com/e4066fcba2e97ee3b781df36803fba4e8d787586ff2f5a1ff64b066671fe0555/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f74776f2e6a73&quot; /&gt;&lt;/a&gt;
            &lt;a href=&quot;https://lgtm.com/projects/g/jonobr1/two.js/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;Language Grade&quot; src=&quot;https://camo.githubusercontent.com/4eeb0020d056b713a911c3a1b9c3464930cc6fbe18cc7d3e25b8e90db7748ef8/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f616c657274732f6769746875622f6a6f6e6f6272312f74776f2e6a73&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
            &lt;p&gt;A two-dimensional drawing api meant for modern browsers. It is renderer agnostic enabling the same api to render in multiple contexts: webgl, canvas2d, and svg.&lt;/p&gt;
            &lt;p&gt;&lt;a href=&quot;http://two.js.org&quot; rel=&quot;nofollow&quot;&gt;Home&lt;/a&gt; • &lt;a href=&quot;https://github.com/jonobr1/two.js/releases&quot;&gt;Releases&lt;/a&gt; • &lt;a href=&quot;http://two.js.org/#examples&quot; rel=&quot;nofollow&quot;&gt;Examples&lt;/a&gt; • &lt;a href=&quot;http://two.js.org/docs/&quot; rel=&quot;nofollow&quot;&gt;Documentation&lt;/a&gt; • &lt;a href=&quot;https://github.com/jonobr1/two.js/tree/dev/wiki/change-log&quot;&gt;Change Log&lt;/a&gt; • &lt;a href=&quot;https://github.com/jonobr1/two.js/issues/new/choose&quot;&gt;Help&lt;/a&gt;&lt;/p&gt;
            &lt;h2&gt;
            Usage&lt;/h2&gt;
            &lt;p&gt;Download the latest &lt;a href=&quot;https://raw.github.com/jonobr1/two.js/dev/build/two.min.js&quot;&gt;minified library&lt;/a&gt; and include it in your html.&lt;/p&gt;
            &lt;div class=&quot;highlight highlight-text-html-basic position-relative overflow-auto js-code-highlight&quot;&gt;
            &lt;pre&gt;&lt;span class=&quot;pl-kos&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pl-ent&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;src&lt;/span&gt;=&quot;&lt;span class=&quot;pl-s&quot;&gt;js/two.min.js&lt;/span&gt;&quot;&lt;span class=&quot;pl-kos&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;pl-ent&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

            &lt;/div&gt;
            &lt;p&gt;It can also be installed via &lt;a href=&quot;https://www.npmjs.com/package/two.js&quot; rel=&quot;nofollow&quot;&gt;npm&lt;/a&gt;, Node Package Manager:&lt;/p&gt;
            &lt;div class=&quot;highlight highlight-source-js position-relative overflow-auto js-code-highlight&quot;&gt;
            &lt;pre&gt;&lt;span class=&quot;pl-s1&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;save&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;two&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;js&lt;/span&gt;&lt;/pre&gt;

            &lt;/div&gt;
            &lt;p&gt;Alternatively see &lt;a href=&quot;https://github.com/jonobr1/two.js#custom-build&quot;&gt;how to build the library yourself&lt;/a&gt;.&lt;/p&gt;
            &lt;p&gt;Here is boilerplate html in order to draw a spinning rectangle in two.js:&lt;/p&gt;
            &lt;div class=&quot;highlight highlight-text-html-basic position-relative overflow-auto js-code-highlight&quot;&gt;
            &lt;pre&gt;&lt;span class=&quot;pl-c1&quot;&gt;&amp;lt;!doctype html&lt;span class=&quot;pl-kos&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;pl-kos&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pl-ent&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;pl-kos&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pl-ent&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;pl-kos&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pl-ent&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;charset&lt;/span&gt;=&quot;&lt;span class=&quot;pl-s&quot;&gt;utf-8&lt;/span&gt;&quot;&lt;span class=&quot;pl-kos&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;pl-kos&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pl-ent&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;src&lt;/span&gt;=&quot;&lt;span class=&quot;pl-s&quot;&gt;js/two.min.js&lt;/span&gt;&quot;&lt;span class=&quot;pl-kos&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;pl-ent&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;pl-kos&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;pl-ent&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;pl-kos&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pl-ent&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;pl-kos&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pl-ent&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;two&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;Two&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;pl-c1&quot;&gt;fullscreen&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;pl-c1&quot;&gt;autostart&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;
            &lt;span class=&quot;pl-kos&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;…
            &lt;/div&gt;
            &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;gh-btn-container&quot;&gt;&lt;a class=&quot;gh-btn&quot; href=&quot;https://github.com/jonobr1/two.js&quot;&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
            &lt;/div&gt;





            &lt;h3&gt;
            &lt;a href=&quot;https://dev.to/feed#7-awesome-zsh-plugins&quot;&gt;
            &lt;/a&gt;
            7. Awesome ZSH plugins
            &lt;/h3&gt;

            &lt;p&gt;A collection of ZSH frameworks, plugins, themes and tutorials.&lt;/p&gt;


            &lt;div class=&quot;ltag-github-readme-tag&quot;&gt;
            &lt;div class=&quot;readme-overview&quot;&gt;
            &lt;h2&gt;
            &lt;img alt=&quot;GitHub logo&quot; src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg&quot; /&gt;
            &lt;a href=&quot;https://github.com/unixorn&quot;&gt;
            unixorn
            &lt;/a&gt; / &lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins&quot;&gt;
            awesome-zsh-plugins
            &lt;/a&gt;
            &lt;/h2&gt;
            &lt;h3&gt;
            A collection of ZSH frameworks, plugins, themes and tutorials.
            &lt;/h3&gt;
            &lt;/div&gt;
            &lt;div class=&quot;ltag-github-body&quot;&gt;

            &lt;div class=&quot;md&quot; id=&quot;readme&quot;&gt;
            &lt;h1&gt;
            awesome-zsh-plugins&lt;/h1&gt;
            &lt;p&gt;&lt;a href=&quot;https://github.com/sindresorhus/awesome&quot;&gt;&lt;img alt=&quot;Awesome&quot; src=&quot;https://camo.githubusercontent.com/abb97269de2982c379cbc128bba93ba724d8822bfbe082737772bd4feb59cb54/68747470733a2f2f63646e2e7261776769742e636f6d2f73696e647265736f726875732f617765736f6d652f643733303566333864323966656437386661383536353265336136336531353464643865383832392f6d656469612f62616467652e737667&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
            &lt;h2&gt;
            Status&lt;/h2&gt;
            &lt;p&gt;&lt;a href=&quot;https://opensource.org/licenses/BSD-3-Clause&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;License&quot; src=&quot;https://camo.githubusercontent.com/5f38dbcdd0eda2680d3b67b921fa302618eccc52775ea3d275fd4cc8b07fc8b7/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f756e69786f726e2f617765736f6d652d7a73682d706c7567696e732e737667&quot; /&gt;&lt;/a&gt;
            &lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins/actions/workflows/awesomebot.yml/badge.svg&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img alt=&quot;Awesomebot&quot; src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--7wgbTkwK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/unixorn/awesome-zsh-plugins/actions/workflows/awesomebot.yml/badge.svg&quot; /&gt;&lt;/a&gt;
            &lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins/stargazers&quot;&gt;&lt;img alt=&quot;GitHub stars&quot; src=&quot;https://camo.githubusercontent.com/aaf6ee1f3ab4e8009dcb2265f7fcb516ba0ccf72e0cba51e7f989ec6bd273efe/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f756e69786f726e2f617765736f6d652d7a73682d706c7567696e732e737667&quot; /&gt;&lt;/a&gt;
            &lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins&quot;&gt;&lt;img alt=&quot;GitHub last commit (branch)&quot; src=&quot;https://camo.githubusercontent.com/3ccbfcc632d4fe5344ce28bc9b0d40de63b2713a007b51a7dd1b7da06b77b614/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f756e69786f726e2f617765736f6d652d7a73682d706c7567696e732f6d61696e2e737667&quot; /&gt;&lt;/a&gt;
            &lt;a href=&quot;https://www.trackawesomelist.com/unixorn/awesome-zsh-plugins/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;Track Awesome List&quot; src=&quot;https://camo.githubusercontent.com/a3a46cf6e9b86345756f800e47a3d24ba217ba4004dd2164a6d4c5168e0c00c9/68747470733a2f2f7777772e747261636b617765736f6d656c6973742e636f6d2f62616467652e737667&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
            &lt;p&gt;A collection of ZSH frameworks, plugins, tutorials &amp;amp; themes inspired by the various awesome list collections out there.&lt;/p&gt;
            &lt;h2&gt;
            Table of Contents&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#frameworks&quot;&gt;Frameworks&lt;/a&gt;
            &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#ansible-role-zsh&quot;&gt;ansible-role-zsh&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#ant-zsh&quot;&gt;ant-zsh&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#antibody&quot;&gt;antibody&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#antigen-hs&quot;&gt;antigen-hs&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#antigen&quot;&gt;antigen&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#ax-zsh&quot;&gt;ax-zsh&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#dotzsh&quot;&gt;dotzsh&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#fresh&quot;&gt;fresh&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#miniplug&quot;&gt;miniplug&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#mzpm&quot;&gt;mzpm&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#oh-my-zsh&quot;&gt;oh-my-zsh&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#pms&quot;&gt;PMS&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#prezto&quot;&gt;prezto&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#pumice&quot;&gt;pumice&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#pz&quot;&gt;pz&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#sheldon&quot;&gt;sheldon&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#toasty&quot;&gt;Toasty&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#tzpm&quot;&gt;tzpm&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#uz&quot;&gt;uz&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#yazt&quot;&gt;yazt&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#zapack&quot;&gt;zapack&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#zcomet&quot;&gt;zcomet&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#zeesh&quot;&gt;zeesh&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#zgem&quot;&gt;zgem&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#zgen&quot;&gt;zgen&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#zgenom&quot;&gt;zgenom&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#zilsh&quot;&gt;zilsh&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#zim&quot;&gt;zim&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#zinit&quot;&gt;Zinit&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#zit&quot;&gt;zit&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#znap&quot;&gt;znap&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#zoppo&quot;&gt;zoppo&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#zpacker&quot;&gt;zpacker&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#zpico&quot;&gt;zpico&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#zplug&quot;&gt;zplug&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#zpm&quot;&gt;zpm&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#zr&quot;&gt;zr&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#zshing&quot;&gt;zshing&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#ztanesh&quot;&gt;ztanesh&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#ztheme&quot;&gt;ztheme&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#ztupide&quot;&gt;ztupide&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#zulu&quot;&gt;zulu&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#setups&quot;&gt;Setups&lt;/a&gt;
            &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#zgenom-1&quot;&gt;zgenom&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#zinit&quot;&gt;zinit&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#tutorials&quot;&gt;Tutorials&lt;/a&gt;
            &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#generic-zsh&quot;&gt;Generic ZSH&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#antigen&quot;&gt;Antigen&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#oh-my-zsh&quot;&gt;Oh-My-Zsh&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#prezto&quot;&gt;Prezto&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#zgen&quot;&gt;Zgen&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#zinit-n%C3%A9-zplugin&quot;&gt;Zinit (né zplugin)&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#zsh-on-windows&quot;&gt;ZSH on Windows&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#plugins&quot;&gt;Plugins&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#completions&quot;&gt;Completions&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#themes&quot;&gt;Themes&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#fonts&quot;&gt;Fonts&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#installation&quot;&gt;Installation&lt;/a&gt;
            &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#antigen-1&quot;&gt;Antigen&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#dotzsh-1&quot;&gt;dotzsh&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#oh-my-zsh-1&quot;&gt;Oh-My-Zsh&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#prezto-1&quot;&gt;Prezto&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#zgen-1&quot;&gt;Zgen&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#zgenom&quot;&gt;Zgenom&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#zplug-1&quot;&gt;zplug&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#zpm-1&quot;&gt;zpm&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#writing-new-plugins&quot;&gt;Writing New Plugins&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#other-resources&quot;&gt;Other Resources&lt;/a&gt;
            &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#zsh-tools&quot;&gt;ZSH Tools&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#other-useful-lists&quot;&gt;Other Useful Lists&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/unixorn/awesome-zsh-plugins#other-references&quot;&gt;Other References&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;em&gt;Please read the &lt;a href=&quot;https://github.com/unixorn/awesome-zsh-pluginsContributing.md&quot;&gt;Contributing Guidelines&lt;/a&gt; before contributing.&lt;/em&gt;&lt;/p&gt;
            &lt;h2&gt;
            Frameworks&lt;/h2&gt;
            &lt;p&gt;These frameworks make customizing your ZSH setup easier.&lt;/p&gt;
            &lt;p&gt;You can find some interesting performance timing comparisons of various frameworks in the following locations.&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/rossmacarthur/zsh-plugin-manager-benchmark&quot;&gt;rossmacarthur/zsh-plugin-manager-benchmark&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/z-shell/pm-perf-test&quot;&gt;pm-perf-test&lt;/a&gt; - Tooling for running performance tests on multiple ZSH frameworks.&lt;/li&gt;
            &lt;/ul&gt;…&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;gh-btn-container&quot;&gt;&lt;a class=&quot;gh-btn&quot; href=&quot;https://github.com/unixorn/awesome-zsh-plugins&quot;&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
            &lt;/div&gt;





            &lt;h3&gt;
            &lt;a href=&quot;https://dev.to/feed#8-flags&quot;&gt;
            &lt;/a&gt;
            8. Flags
            &lt;/h3&gt;

            &lt;p&gt;Add Feature Flags to your Next.js application with a single React Hook. This package integrates your Next.js application with HappyKit Flags.&lt;/p&gt;


            &lt;div class=&quot;ltag-github-readme-tag&quot;&gt;
            &lt;div class=&quot;readme-overview&quot;&gt;
            &lt;h2&gt;
            &lt;img alt=&quot;GitHub logo&quot; src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg&quot; /&gt;
            &lt;a href=&quot;https://github.com/happykit&quot;&gt;
            happykit
            &lt;/a&gt; / &lt;a href=&quot;https://github.com/happykit/flags&quot;&gt;
            flags
            &lt;/a&gt;
            &lt;/h2&gt;
            &lt;h3&gt;
            ⛳️ Feature Flags for Next.js
            &lt;/h3&gt;
            &lt;/div&gt;
            &lt;div class=&quot;ltag-github-body&quot;&gt;

            &lt;div class=&quot;md&quot; id=&quot;readme&quot;&gt;
            &lt;a href=&quot;https://github.com/happykit/flags&quot; id=&quot;user-content-nav&quot;&gt;
            &lt;img src=&quot;https://camo.githubusercontent.com/8005774e8fc74a06b908a871b835d89774029dc063de1ac2f09310d77413eb46/68747470733a2f2f692e696d6775722e636f6d2f4d533247746b6a2e706e67&quot; width=&quot;100%&quot; /&gt;
            &lt;/a&gt;
            &lt;div&gt;
            &lt;a href=&quot;https://github.com/happykit/flags/tree/master/package&quot;&gt;Documentation&lt;/a&gt;
            &lt;span&gt; • &lt;/span&gt;
            &lt;a href=&quot;https://flags.happykit.dev/&quot; rel=&quot;nofollow&quot;&gt;Examples&lt;/a&gt;
            &lt;span&gt; • &lt;/span&gt;
            &lt;a href=&quot;https://medium.com/frontend-digest/using-feature-flags-in-next-js-c5c8d0795a2?source=friends_link&amp;amp;sk=d846a29f376acf9cfa41e926883923ab&quot; rel=&quot;nofollow&quot;&gt;Full Tutorial&lt;/a&gt;
            &lt;span&gt; • &lt;/span&gt;
            &lt;a href=&quot;https://happykit.dev/solutions/flags&quot; rel=&quot;nofollow&quot;&gt;happykit.dev&lt;/a&gt;
            &lt;span&gt; • &lt;/span&gt;
            &lt;a href=&quot;https://twitter.**com**/happykitdev&quot; rel=&quot;nofollow&quot;&gt;@happykitdev&lt;/a&gt;
            &lt;/div&gt;
            &lt;br /&gt;
            &lt;p&gt; &lt;/p&gt;
            &lt;p&gt;Add Feature Flags to your Next.js application with a single React Hook. This package integrates your Next.js application with HappyKit Flags. Create a free &lt;a href=&quot;https://happykit.dev/signup&quot; rel=&quot;nofollow&quot;&gt;happykit.dev&lt;/a&gt; account to get started.&lt;/p&gt;
            &lt;h2&gt;
            Key Features&lt;/h2&gt;
            &lt;ul&gt;
            &lt;li&gt;written for Next.js&lt;/li&gt;
            &lt;li&gt;integrate using a simple &lt;code&gt;useFlags()&lt;/code&gt; hook&lt;/li&gt;
            &lt;li&gt;only 5 kB in size&lt;/li&gt;
            &lt;li&gt;extremely fast flag responses (~50ms)&lt;/li&gt;
            &lt;li&gt;supports &lt;em&gt;user targeting&lt;/em&gt;, &lt;em&gt;custom rules&lt;/em&gt; and &lt;em&gt;rollouts&lt;/em&gt;
            &lt;/li&gt;
            &lt;li&gt;support &lt;em&gt;server-side rendering&lt;/em&gt; and &lt;em&gt;static site generation&lt;/em&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;br /&gt;

            &lt;b&gt;Want to see a demo?&lt;/b&gt;
            &lt;a href=&quot;https://user-images.githubusercontent.com/1765075/94278500-90819000-ff53-11ea-912a-a59cfb491406.gif&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img alt=&quot;HappyKit Flags Demo&quot; src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--9tGxtr0g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/1765075/94278500-90819000-ff53-11ea-912a-a59cfb491406.gif&quot; /&gt;&lt;/a&gt;
            &lt;br /&gt;&lt;br /&gt;

            &lt;br /&gt;
            &lt;h2&gt;
            Documentation&lt;/h2&gt;
            &lt;p&gt;See the &lt;a href=&quot;https://github.com/happykit/flags/tree/master/package&quot;&gt;full documentation&lt;/a&gt; for setup instructions and usage guides.&lt;/p&gt;
            &lt;h2&gt;
            Examples&lt;/h2&gt;
            &lt;p&gt;This is roughly what the usage of feature flags looks like once you're up and running.&lt;/p&gt;
            &lt;div class=&quot;highlight highlight-source-js position-relative overflow-auto js-code-highlight&quot;&gt;
            &lt;pre&gt;&lt;span class=&quot;pl-c&quot;&gt;// pages/index.js&lt;/span&gt;
            &lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-kos&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;useFlags&lt;/span&gt; &lt;span class=&quot;pl-kos&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&quot;@happykit/flags/client&quot;&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;pl-k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;IndexPage&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;pl-kos&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-kos&quot;&gt;{&lt;/span&gt; flags &lt;span class=&quot;pl-kos&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;useFlags&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;xzibit&lt;/span&gt; ? &lt;span class=&quot;pl-s&quot;&gt;'Yo dawg'&lt;/span&gt; : &lt;span class=&quot;pl-s&quot;&gt;'Hello'&lt;/span&gt;&lt;span class=&quot;pl-kos&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;pl-kos&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

            &lt;/div&gt;
            &lt;p&gt;The self documenting examples at…&lt;/p&gt;
            &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;gh-btn-container&quot;&gt;&lt;a class=&quot;gh-btn&quot; href=&quot;https://github.com/happykit/flags&quot;&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
            &lt;/div&gt;





            &lt;h3&gt;
            &lt;a href=&quot;https://dev.to/feed#9-every-programmer-should-know&quot;&gt;
            &lt;/a&gt;
            9. Every Programmer Should Know
            &lt;/h3&gt;

            &lt;p&gt;A collection of (mostly) technical things every software developer should know about&lt;/p&gt;


            &lt;div class=&quot;ltag-github-readme-tag&quot;&gt;
            &lt;div class=&quot;readme-overview&quot;&gt;
            &lt;h2&gt;
            &lt;img alt=&quot;GitHub logo&quot; src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg&quot; /&gt;
            &lt;a href=&quot;https://github.com/mtdvio&quot;&gt;
            mtdvio
            &lt;/a&gt; / &lt;a href=&quot;https://github.com/mtdvio/every-programmer-should-know&quot;&gt;
            every-programmer-should-know
            &lt;/a&gt;
            &lt;/h2&gt;
            &lt;h3&gt;
            A collection of (mostly) technical things every software developer should know about
            &lt;/h3&gt;
            &lt;/div&gt;
            &lt;div class=&quot;ltag-github-body&quot;&gt;

            &lt;div class=&quot;md&quot; id=&quot;readme&quot;&gt;
            &lt;blockquote&gt;
            &lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://metadevelopment.io/&quot; rel=&quot;nofollow&quot;&gt;Join our community&lt;/a&gt;&lt;/em&gt; for professional Software Developers and get more control over your life and career!&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;h1&gt;
            Every Programmer Should Know 🤔
            &lt;/h1&gt;
            &lt;p&gt;A collection of (mostly) technical things every software developer should know.&lt;/p&gt;
            &lt;p&gt;☝️ &lt;em&gt;These are resources I can recommend to every programmer regardless of their skill level or tech stack&lt;/em&gt;&lt;/p&gt;
            &lt;p&gt;Highly opinionated 💣. Not backed by science
            Comes in no particular order ♻️&lt;/p&gt;
            &lt;p&gt;U like it? ⭐ it and &lt;a href=&quot;https://twitter.com/mr_mig_by/status/900735231552098306&quot; rel=&quot;nofollow&quot;&gt;share&lt;/a&gt; with a friendly developer
            U don't like it? &lt;a href=&quot;https://twitter.com/RespectfulMemes/status/900147758845308930&quot; rel=&quot;nofollow&quot;&gt;Watch the doggo&lt;/a&gt; 🐶&lt;/p&gt;
            &lt;p&gt;&lt;em&gt;P.S. You &lt;a href=&quot;https://xkcd.com/1050/&quot; rel=&quot;nofollow&quot;&gt;don't need to know&lt;/a&gt; all of that by heart to be a programmer
            But knowing the stuff will help you become better! 💪&lt;/em&gt;&lt;/p&gt;
            &lt;p&gt;&lt;em&gt;P.P.S. &lt;a href=&quot;https://github.com/mtdvio/every-programmer-should-knowCONTRIBUTING.md&quot;&gt;Contributions&lt;/a&gt; are welcome!&lt;/em&gt;&lt;/p&gt;

            &lt;h3&gt;
            Introduction&lt;/h3&gt;
            &lt;ul&gt;
            &lt;li&gt;
            🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=SzJ46YA_RaA&quot; rel=&quot;nofollow&quot;&gt;Map of Computer Science&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt;
            🎥 &lt;a href=&quot;http://carlcheo.com/compsci&quot; rel=&quot;nofollow&quot;&gt;40 Key Computer Science Concepts Explained In Layman’s Terms&lt;/a&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h3&gt;
            Falsehoods&lt;/h3&gt;
            &lt;ul&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/kdeldycke/awesome-falsehood&quot;&gt;Awesome Falsehoods&lt;/a&gt;
            💊 Curated list of falsehoods programmers believe in
            Check for things you do not know about Strings, Addresses, Names,…&lt;/li&gt;
            &lt;/ul&gt;
            &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;gh-btn-container&quot;&gt;&lt;a class=&quot;gh-btn&quot; href=&quot;https://github.com/mtdvio/every-programmer-should-know&quot;&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
            &lt;/div&gt;





            &lt;h3&gt;
            &lt;a href=&quot;https://dev.to/feed#10-the-art-of-command-line&quot;&gt;
            &lt;/a&gt;
            10. The Art of Command Line
            &lt;/h3&gt;

            &lt;p&gt;Master the command line, in one page&lt;/p&gt;


            &lt;div class=&quot;ltag-github-readme-tag&quot;&gt;
            &lt;div class=&quot;readme-overview&quot;&gt;
            &lt;h2&gt;
            &lt;img alt=&quot;GitHub logo&quot; src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg&quot; /&gt;
            &lt;a href=&quot;https://github.com/jlevy&quot;&gt;
            jlevy
            &lt;/a&gt; / &lt;a href=&quot;https://github.com/jlevy/the-art-of-command-line&quot;&gt;
            the-art-of-command-line
            &lt;/a&gt;
            &lt;/h2&gt;
            &lt;h3&gt;
            Master the command line, in one page
            &lt;/h3&gt;
            &lt;/div&gt;
            &lt;div class=&quot;ltag-github-body&quot;&gt;

            &lt;div class=&quot;md&quot; id=&quot;readme&quot;&gt;
            &lt;p&gt;🌍
            &lt;em&gt;&lt;a href=&quot;https://github.com/jlevy/the-art-of-command-lineREADME-cs.md&quot;&gt;Čeština&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/jlevy/the-art-of-command-lineREADME-de.md&quot;&gt;Deutsch&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/jlevy/the-art-of-command-lineREADME-el.md&quot;&gt;Ελληνικά&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/jlevy/the-art-of-command-lineREADME.md&quot;&gt;English&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/jlevy/the-art-of-command-lineREADME-es.md&quot;&gt;Español&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/jlevy/the-art-of-command-lineREADME-fr.md&quot;&gt;Français&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/jlevy/the-art-of-command-lineREADME-id.md&quot;&gt;Indonesia&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/jlevy/the-art-of-command-lineREADME-it.md&quot;&gt;Italiano&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/jlevy/the-art-of-command-lineREADME-ja.md&quot;&gt;日本語&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/jlevy/the-art-of-command-lineREADME-ko.md&quot;&gt;한국어&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/jlevy/the-art-of-command-lineREADME-pl.md&quot;&gt;polski&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/jlevy/the-art-of-command-lineREADME-pt.md&quot;&gt;Português&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/jlevy/the-art-of-command-lineREADME-ro.md&quot;&gt;Română&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/jlevy/the-art-of-command-lineREADME-ru.md&quot;&gt;Русский&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/jlevy/the-art-of-command-lineREADME-sl.md&quot;&gt;Slovenščina&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/jlevy/the-art-of-command-lineREADME-uk.md&quot;&gt;Українська&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/jlevy/the-art-of-command-lineREADME-zh.md&quot;&gt;简体中文&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/jlevy/the-art-of-command-lineREADME-zh-Hant.md&quot;&gt;繁體中文&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
            &lt;h1&gt;
            The Art of Command Line&lt;/h1&gt;
            &lt;p&gt;&lt;em&gt;Note: I'm planning to revise this and looking for a new co-author to help with expanding this into a more comprehensive guide. While it's very popular, it could be broader and a bit deeper. If you like to write and are close to being an expert on this material and willing to consider helping, please drop me a note at josh (0x40) holloway.com. –&lt;a href=&quot;https://github.com/jlevy&quot;&gt;jlevy&lt;/a&gt;, &lt;a href=&quot;https://www.holloway.com&quot; rel=&quot;nofollow&quot;&gt;Holloway&lt;/a&gt;. Thank you!&lt;/em&gt;&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/jlevy/the-art-of-command-line#meta&quot;&gt;Meta&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/jlevy/the-art-of-command-line#basics&quot;&gt;Basics&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/jlevy/the-art-of-command-line#everyday-use&quot;&gt;Everyday use&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/jlevy/the-art-of-command-line#processing-files-and-data&quot;&gt;Processing files and data&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/jlevy/the-art-of-command-line#system-debugging&quot;&gt;System debugging&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/jlevy/the-art-of-command-line#one-liners&quot;&gt;One-liners&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/jlevy/the-art-of-command-line#obscure-but-useful&quot;&gt;Obscure but useful&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/jlevy/the-art-of-command-line#macos-only&quot;&gt;macOS only&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/jlevy/the-art-of-command-line#windows-only&quot;&gt;Windows only&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/jlevy/the-art-of-command-line#more-resources&quot;&gt;More resources&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/jlevy/the-art-of-command-line#disclaimer&quot;&gt;Disclaimer&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;a href=&quot;https://github.com/jlevy/the-art-of-command-linecowsay.png&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img alt=&quot;curl -s 'https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md' | egrep -o '\w+' | tr -d '`' | cowsay -W50&quot; src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--lLg2OPD7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/jlevy/the-art-of-command-linecowsay.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
            &lt;p&gt;Fluency on the command line is a skill often neglected or considered arcane, but it improves your flexibility…&lt;/p&gt;
            &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;gh-btn-container&quot;&gt;&lt;a class=&quot;gh-btn&quot; href=&quot;https://github.com/jlevy/the-art-of-command-line&quot;&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
            &lt;/div&gt;





            &lt;h3&gt;
            &lt;a href=&quot;https://dev.to/feed#stargazing&quot;&gt;
            &lt;/a&gt;
            Stargazing 📈
            &lt;/h3&gt;

            &lt;h4&gt;
            &lt;a href=&quot;https://dev.to/feed#top-risers-over-last-7-days&quot;&gt;
            &lt;/a&gt;
            &lt;a href=&quot;https://stargazing.dev/?owner=&amp;amp;order=weeklyStarChange&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false&quot;&gt;Top risers over last 7 days&lt;/a&gt;🔗
            &lt;/h4&gt;

            &lt;ol&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/EbookFoundation/free-programming-books&quot;&gt;Free Programming Books&lt;/a&gt; +1,673 stars&lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/sindresorhus/awesome&quot;&gt;Awesome&lt;/a&gt; +1,672 stars&lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/mtdvio/every-programmer-should-know&quot;&gt;Every Programmer Should Know&lt;/a&gt; +1,644 stars&lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/remix-run/remix&quot;&gt;Remix&lt;/a&gt; +1,586 stars&lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/jesseduffield/lazygit&quot;&gt;Lazy Git&lt;/a&gt; +1,460 stars&lt;/li&gt;
            &lt;/ol&gt;

            &lt;h4&gt;
            &lt;a href=&quot;https://dev.to/feed#top-growth-over-last-7-days&quot;&gt;
            &lt;/a&gt;
            &lt;a href=&quot;https://stargazing.dev/?owner=&amp;amp;order=weeklyStarChangePercent&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false&quot;&gt;Top growth(%) over last 7 days&lt;/a&gt;🔗
            &lt;/h4&gt;

            &lt;ol&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/eBay/nice-modal-react&quot;&gt;Nice Modal React&lt;/a&gt; +42%&lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/remix-run/remix&quot;&gt;Remix&lt;/a&gt; +27%&lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/medusajs/medusa&quot;&gt;Medusa&lt;/a&gt; +25%&lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/NetanelBasal/helpful-decorators&quot;&gt;Helpful Decorators&lt;/a&gt; +17%&lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/figment-networks/learn-web3-dapp&quot;&gt;Learn Web3 dapp&lt;/a&gt; +16%&lt;/li&gt;
            &lt;/ol&gt;

            &lt;h4&gt;
            &lt;a href=&quot;https://dev.to/feed#top-risers-over-last-30-days&quot;&gt;
            &lt;/a&gt;
            &lt;a href=&quot;https://stargazing.dev/?owner=&amp;amp;order=monthlyStarChange&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false&quot;&gt;Top risers over last 30 days&lt;/a&gt;🔗
            &lt;/h4&gt;

            &lt;ol&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/sindresorhus/awesome&quot;&gt;Awesome&lt;/a&gt; +3,911 stars&lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/microsoft/ML-For-Beginners&quot;&gt;Machine Learning for beginner&lt;/a&gt; +3,683 stars&lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/EbookFoundation/free-programming-books&quot;&gt;Free Programming Books&lt;/a&gt; +3,413 stars&lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/medusajs/medusa&quot;&gt;Medusa&lt;/a&gt; +3,202 stars&lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/jwasham/coding-interview-university&quot;&gt;Coding Interview University&lt;/a&gt; +2,996 stars&lt;/li&gt;
            &lt;/ol&gt;

            &lt;h4&gt;
            &lt;a href=&quot;https://dev.to/feed#top-growth-over-last-30-days&quot;&gt;
            &lt;/a&gt;
            &lt;a href=&quot;https://stargazing.dev/?owner=&amp;amp;order=monthlyStarChangePercent&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false&quot;&gt;Top growth(%) over last 30 days&lt;/a&gt;🔗
            &lt;/h4&gt;

            &lt;ol&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/teafuljs/teaful&quot;&gt;Fragstore&lt;/a&gt; +268%&lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/antfu/unocss&quot;&gt;unocss&lt;/a&gt; +93%&lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/estruyf/vscode-front-matter&quot;&gt;vsCode Frontmatter&lt;/a&gt; +61%&lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/eBay/nice-modal-react&quot;&gt;Nice Modal React&lt;/a&gt; +27%&lt;/li&gt;
            &lt;li&gt;
            &lt;a href=&quot;https://github.com/ixartz/Next-js-Boilerplate&quot;&gt;NextJS Boilerplate&lt;/a&gt; +48%&lt;/li&gt;
            &lt;/ol&gt;

            &lt;p&gt;For all for the latest rankings please checkout &lt;a href=&quot;https://stargazing.dev&quot;&gt;Stargazing.dev&lt;/a&gt;&lt;/p&gt;




            &lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href=&quot;https://stargazing.dev/&quot;&gt;Stargazing.dev&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

            &lt;p&gt;If you enjoyed this article you can &lt;a href=&quot;https://twitter.com/stargazing_dev&quot;&gt;follow me&lt;/a&gt; on Twitter where I regularly post about HTML, CSS and JavaScript.&lt;/p&gt;</content>
        <author>
            <name>Iain Freestone</name>
            <uri>https://dev.to</uri>
        </author>
        <source>
            <title type="html">DEV Community</title>
            <subtitle type="html">A constructive and inclusive social network for software developers. With you every step of your journey.</subtitle>
            <link rel="self" href="https://dev.to/feed"/>
            <id>https://dev.to</id>
        </source>
    </entry>

    <entry>
        <title type="html" xml:lang="en-US">Software Engineer in Test (Python)</title>
        <link href="https://agiliway.com/software-engineer-in%e2%80%aftest-python-2/"/>
        <id>https://agiliway.com/?p=9733</id>
        <updated>2021-12-03T14:00:52+00:00</updated>
        <content type="html" xml:lang="en-US">&lt;p&gt;We are looking for an experienced Software Engineer in Test (Python) to join a development team for our USA client. Their product is an AWS hosted multi-module payment and analytical platform for the healthcare services, written in Clojure/Golang/Python language stack. The product encompasses a few applications for customer journeys (web, mobile), data science/data analytics platform, multiple integrations with federal and governmental resources, and complex micro-service architecture. The product’s domain is Healthcare/Fintech, hence all the compliances and accent on security and high-performance.&lt;/p&gt;
            &lt;p&gt;&lt;span id=&quot;more-9733&quot;&gt;&lt;/span&gt;&lt;/p&gt;
            &lt;h4 class=&quot;text-center&quot; style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;Responsibilities:&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h4&gt;
            &lt;ul&gt;
            &lt;li&gt;Analyzing client requirements&lt;/li&gt;
            &lt;li&gt;Design and develop automated test framework  for Web and Mobile&lt;/li&gt;
            &lt;li&gt;Automation Test cases creation, execution, maintenance&lt;/li&gt;
            &lt;li&gt;Issues registration and tracking&lt;/li&gt;
            &lt;li&gt;Analyse  design and functional solutions and provide list of improvements to engineers when applicable.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h4 style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;Requirements:&lt;/strong&gt;&lt;/h4&gt;
            &lt;ul&gt;
            &lt;li&gt; 3+ years of Python engineering experience&lt;/li&gt;
            &lt;li&gt;Proven ability to write quality code in Python (knowledge of pep8; experience with flakes, black)&lt;/li&gt;
            &lt;li&gt;Ability to design and maintain test automation frameworks (experience with github workflows, actions; experience with python packaging)&lt;/li&gt;
            &lt;li&gt;Experience with different  testing methods: functional, integration,  regression, performance, usability testing&lt;/li&gt;
            &lt;li&gt;Experience with healthcare project&lt;/li&gt;
            &lt;li&gt;Experience in machine learning testing and/or teaching the model&lt;/li&gt;
            &lt;li&gt;Experience with EDI, FHIR data formats&lt;/li&gt;
            &lt;li&gt;Practical background in multi module testing&lt;/li&gt;
            &lt;li&gt;Familiarity with AWS Hosting  (experience with aws lambda; experience with aws DynamoDB; experience with aws s3)&lt;/li&gt;
            &lt;li&gt;Understanding of software development process&lt;/li&gt;
            &lt;li&gt;At least advanced speaking English level&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h4 class=&quot;text-center&quot;&gt;&lt;strong&gt;We offer frie&lt;/strong&gt;&lt;strong&gt;ndly working conditions with competitive compensation and benefits including:&lt;/strong&gt;&lt;/h4&gt;
            &lt;ul&gt;
            &lt;li&gt;Comfortable working environment&lt;/li&gt;
            &lt;li&gt;&lt;span&gt;Friendly team and management&lt;/span&gt;&lt;/li&gt;
            &lt;li&gt;&lt;span&gt;Competitive salary&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/li&gt;
            &lt;li&gt;&lt;span&gt;Free English classes&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/li&gt;
            &lt;li&gt;&lt;span&gt;Regular performance-based compensation review&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/li&gt;
            &lt;li&gt;&lt;span&gt;Flexible working hours&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/li&gt;
            &lt;li&gt;&lt;span&gt;100% paid vacation, 4 weeks per year&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/li&gt;
            &lt;li&gt;&lt;span&gt;100% paid sick-leaves&lt;/span&gt;&lt;/li&gt;
            &lt;li&gt;&lt;span&gt;Corporate and team building events&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/li&gt;
            &lt;li&gt;Medical insurance (50% is paid)&lt;/li&gt;
            &lt;/ul&gt;The post &lt;a href=&quot;https://agiliway.com/software-engineer-in%e2%80%aftest-python-2/&quot;&gt;Software Engineer in Test (Python)&lt;/a&gt; first appeared on &lt;a href=&quot;https://agiliway.com&quot;&gt;Agiliway&lt;/a&gt;.</content>
        <author>
            <name>admin-hr</name>
            <uri>https://agiliway.com</uri>
        </author>
        <source>
            <title type="html">Agiliway</title>
            <link rel="self" href="https://agiliway.com/feed/"/>
            <id>https://agiliway.com</id>
        </source>
    </entry>

    <entry>
        <title type="html">Clojure/Javascript Full-stack software engineer at rocklog GmbH</title>
        <link href="https://jobs.braveclojure.com/company/rocklog-gmbh/listing/clojure-javascript-full-stack-software-engineer/QFP3N6E0F_vZCDPSxoewJ"/>
        <id>https://jobs.braveclojure.com/company/rocklog-gmbh/listing/clojure-javascript-full-stack-software-engineer/QFP3N6E0F_vZCDPSxoewJ</id>
        <updated>2021-12-03T10:31:29+00:00</updated>
        <content type="html">&lt;div&gt;&lt;h1&gt;Clojure/Javascript Full-stack software engineer at rocklog GmbH&lt;/h1&gt;&lt;div&gt;40000 - 100000&lt;/div&gt;&lt;div&gt;&lt;a&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;h1&gt;rocklog - the company&lt;/h1&gt;&lt;p&gt;rocklog Limited is privately held software company, no venture capital buy-in, we go for the long run and try our best to create supply chain management software that is &lt;em&gt;simple, yet elegant, and always fast&lt;/em&gt;. Our SaaS &lt;strong&gt;planet rocklog&lt;/strong&gt; powers supply chains and acts an integration platform for a diverse crowd - so we are boutique. We help those that are seeking for transparent pricing, no trap-ins and whose business model does not fit the mainstream.&lt;/p&gt;&lt;h1&gt;our customers&lt;/h1&gt;&lt;p&gt;many charity organisations, chemical industries, food industry, service industry, retail&lt;/p&gt;&lt;h1&gt;our stack&lt;/h1&gt;&lt;p&gt;Clojure on the server-side from top-to-bottom, MongoDB, CouchDB, STM-based database and therefor programming model that kicks ass, Latex, Javascript/Typescript on the client-side, Mithril.js, D3.js, Docker, Multivendor Cloud, CircleCI&lt;/p&gt;&lt;p&gt;we try to stick away from buzzwords - true innovation is rare, we prefer functional thinking and programming, scratching our head twice before introducing dependencies, we struggle and most of the time - we succeed&lt;/p&gt;&lt;h1&gt;motto&lt;/h1&gt;&lt;p&gt;&quot;the slight overburdening is the best that can happen to a human being&quot; - Alexander Humboldt &lt;/p&gt;&lt;h1&gt;invariants you need to meet&lt;/h1&gt;
            &lt;ul&gt;
            &lt;li&gt;university degree in computer science or another engineering subject&lt;/li&gt;
            &lt;li&gt;good understanding of and proven track in implementing software systems of substiantial size using functional programming&lt;/li&gt;
            &lt;li&gt;opinionated and knowledgable on software design, architecture, programming paradigms&lt;/li&gt;
            &lt;li&gt;you like to talk about cache incoherence, how to avoid it and how to live with it&lt;/li&gt;
            &lt;li&gt;you find the following relevant to your job &lt;a href=&quot;https://www.freecodecamp.org/news/must-know-numbers-for-every-computer-engineer/&quot;&gt;https://www.freecodecamp.org/news/must-know-numbers-for-every-computer-engineer/&lt;/a&gt; &lt;a href=&quot;https://www.researchgate.net/profile/Pat-Helland/publication/45871737_Building_on_Quicksand/links/605e8bcc458515e83472f07c/Building-on-Quicksand.pdf&quot;&gt;https://www.researchgate.net/profile/Pat-Helland/publication/45871737_Building_on_Quicksand/links/605e8bcc458515e83472f07c/Building-on-Quicksand.pdf&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;linux/unix experience&lt;/li&gt;
            &lt;li&gt;tolerant about yourself and others&lt;/li&gt;
            &lt;li&gt;some open-source track/background&lt;/li&gt;
            &lt;li&gt;you see the problems but you always seek a solution&lt;/li&gt;
            &lt;li&gt;you like to help other people in your team&lt;/li&gt;
            &lt;li&gt;you know that some major problems in the world stem from misunderstand vague language, so you know how to read/write scientific papers/bug reports/release notes&lt;/li&gt;
            &lt;/ul&gt;&lt;h1&gt;Minimum compensation policy&lt;/h1&gt;&lt;p&gt;We're not exploiting people - no matter where you're on planet Earth, you get at least 40k USD per year. Depending on your experience, scientific education and your location you get a surplus.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content>
        <author>
            <name>Brave Clojure Jobs</name>
            <uri>https://jobs.braveclojure.com</uri>
        </author>
        <source>
            <title type="html">Brave Clojure Jobs</title>
            <subtitle type="html">Find a Clojure job and use the language you love</subtitle>
            <link rel="self" href="https://jobs.braveclojure.com"/>
            <id>https://jobs.braveclojure.com</id>
        </source>
    </entry>

    <entry>
        <title type="html" xml:lang="en-US">reititはいいぞ</title>
        <link href="https://blog.valerauko.net/2021/12/03/reitit-wa-ii-zo/"/>
        <id>https://blog.valerauko.net/?p=9075</id>
        <updated>2021-12-02T21:00:00+00:00</updated>
        <content type="html" xml:lang="en-US">&lt;p&gt;&lt;a href=&quot;https://github.com/metosin/reitit&quot;&gt;reitit&lt;/a&gt;は&lt;a href=&quot;https://clojure.org/&quot;&gt;Clojure&lt;/a&gt;/&lt;a href=&quot;https://clojurescript.org/&quot;&gt;Script&lt;/a&gt;の高速なルーター。はい30文字。&lt;/p&gt;



            &lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;img alt=&quot;brown wooden pathway on green grass field near brown rocky mountain under white clouds during daytime&quot; class=&quot;wp-image-9078&quot; height=&quot;668&quot; src=&quot;https://blog.valerauko.net/wp-content/uploads/2021/11/wpnqkq2b3ra-1024x668.jpg&quot; width=&quot;1024&quot; /&gt;&lt;/figure&gt;



            &lt;span id=&quot;more-9075&quot;&gt;&lt;/span&gt;



            &lt;p&gt;もうちょっと長文でいくと、フィンランドのメトシン社が出しているルーターライブラリであって、パフォーマンスにしっかり重点を置きながらも惚れちゃうぐらいの機能の豊富さを誇っている。フロントエンド（ClojureScript）で使ったことが（まだ）ないので省いて、サーバー側での振る舞いとかに関してまとめよう。&lt;/p&gt;



            &lt;h2&gt;まずは引っかかるところ&lt;/h2&gt;



            &lt;h3&gt;ほとんどコンパイル時&lt;/h3&gt;



            &lt;p&gt;reititが&lt;a href=&quot;https://cljdoc.org/d/metosin/reitit/0.5.15/doc/misc/performance&quot;&gt;あんだけのパフォーマンス&lt;/a&gt;発揮できるのは、可能な限りの処理をコンパイル時に行って実行時で必要最小限のことしかやらないのが一つの理由。入れ子になっているルートを全部平にしてそれぞれにミドルウェアを展開して、ルート郡に最適な選択方法を適応する。&lt;/p&gt;



            &lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;img alt=&quot;green track decor&quot; class=&quot;wp-image-9079&quot; height=&quot;683&quot; src=&quot;https://blog.valerauko.net/wp-content/uploads/2021/11/eky6_9w_iqy-1024x683.jpg&quot; width=&quot;1024&quot; /&gt;&lt;/figure&gt;



            &lt;p&gt;強力な実装方式ではあるが、注意しなければ問題の原因にもなりうる。例えば状態ありの（ステートフルな）ミドルウェアを使うと、それが各エンドポイントに複製されるので共有されると期待した状態が共有されない。別関数になっちゃってるから当たり前。なので&lt;code&gt;ring.middleware.session/wrap-session&lt;/code&gt;のような状態ありきのミドルウェアを使うとルートと別にその初期化を行って、その結果を渡す&lt;a href=&quot;https://github.com/metosin/reitit/issues/205&quot;&gt;回避策を取る必要がある&lt;/a&gt;。&lt;/p&gt;



            &lt;h3&gt;バッティングしないでね&lt;/h3&gt;



            &lt;p&gt;ルートがバッティングすると、最適な&lt;a href=&quot;https://cljdoc.org/d/metosin/reitit/0.5.15/doc/advanced/different-routers&quot;&gt;探索方法はあれべなく&lt;/a&gt;なって、そうじゃないルートと比べてパフォーマンスがかなり落ちてしまう。これはもちろんreititの問題じゃなく、バッティングしちゃうルートが悪いけど、違和感覚えるかもしれないから記載しておく。&lt;/p&gt;



            &lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;img alt=&quot;elephant walking during daytime&quot; class=&quot;wp-image-9080&quot; height=&quot;576&quot; src=&quot;https://blog.valerauko.net/wp-content/uploads/2021/11/qjbyg6o0ick-1024x576.jpg&quot; width=&quot;1024&quot; /&gt;&lt;/figure&gt;



            &lt;p&gt;例えばマストドンのAPIを実装しようとすると、&lt;a href=&quot;https://docs.joinmastodon.org/methods/accounts/&quot;&gt;あっちこっちで&lt;/a&gt;派手にバッティングしている。それで比較して5ルートしかないhello worldより遅いのはreititの問題ではないとだけ認識しよう。&lt;/p&gt;



            &lt;h2&gt;惚れるやつ&lt;/h2&gt;



            &lt;p&gt;さてちょっとアレなところも片付けたし、気を取り直して最高に嬉しいところを見てみよう。パフォーマンスは本家が&lt;a href=&quot;https://cljdoc.org/d/metosin/reitit/0.5.15/doc/misc/performance#restful-apis&quot;&gt;ドキュメントにしっかり自慢&lt;/a&gt;しているからあまり触れないつもりだけど、とりあえずそこそこかなりめっちゃ速い。&lt;/p&gt;



            &lt;h3&gt;ルート引数の変換&lt;/h3&gt;



            &lt;p&gt;エンドポイントの処理を行う関数いわゆるハンドラに渡す引数は色々あり得る。&lt;/p&gt;



            &lt;ul&gt;&lt;li&gt;パスに入った情報: &lt;code&gt;/api/users/:id/profile&lt;/code&gt; からの &lt;code&gt;id&lt;/code&gt;&lt;/li&gt;&lt;li&gt;GETのクエリの情報: &lt;code&gt;/api/users/:id/profile?full=true&lt;/code&gt; からの &lt;code&gt;full&lt;/code&gt; (値は &lt;code&gt;true&lt;/code&gt; )&lt;/li&gt;&lt;li&gt;POSTしたJSONの情報&lt;/li&gt;&lt;li&gt;POSTしたフォームの情報&lt;/li&gt;&lt;/ul&gt;



            &lt;p&gt;エンドポイントの定義にその処理に必要な情報のもとの場所と形式を定義すれば、基本的に文字列として飛んでくるリクエストの中からreititがよしなにその&lt;a href=&quot;https://cljdoc.org/d/metosin/reitit/0.5.15/doc/coercion/coercion-explained&quot;&gt;形式に沿って数値にしたりしてくれる&lt;/a&gt;。形式の定義としてClojureのspecもちろん、metosin社製のdata-specやMalli、PlumaticのSchemaも対応している。形式を満たさないリクエストが飛んでくる時にエラーにするかどうするかも設定できる。&lt;/p&gt;



            &lt;p&gt;同様にサーバーから返すレスポンスにも形式を強制できる。さらに開発やテスト環境でゴリゴリ固めて厳しい設定にして、お客様に不本意のエラーは見せたくない本番ではちょっと緩めて動かす手すらある（いいかは置いといて）。&lt;/p&gt;



            &lt;p&gt;Railsでルートの定義はこっちで、引数の定義はまずなく、バリデーションかけるとしたらコントローラーかな？とは大違いできれいに一箇所にルートにその情報が揃う。&lt;/p&gt;



            &lt;p&gt;multipartのリクエストだけはちょっと苦手。&lt;/p&gt;



            &lt;h3&gt;Swagger&lt;/h3&gt;



            &lt;p&gt;ルートの情報だけでswagger.jsonを出力してくれて、SwaggerUIまで内蔵のモジュールすらある。これだと個別にSwaggerの形式に沿ったJSONを手動で書いたり、SwaggerUIを探してわざわざ開発環境に入れるとかもいらなくなる。&lt;/p&gt;



            &lt;p&gt;API開発しているところでこのおかげでめっちゃ早く動けて、コード変更した瞬間にブラウザからAPIを簡単に試せるありがたさは感動する。ルート情報にあるもの（&lt;code&gt;:parameters&lt;/code&gt;, &lt;code&gt;:responses&lt;/code&gt; とか）は勝手にSwaggerに展開されるし、そこにはない情報でも（&lt;code&gt;:produces&lt;/code&gt;, &lt;code&gt;:consumes&lt;/code&gt; とか）は &lt;code&gt;:swagger&lt;/code&gt; キーでエンドポイントの情報にいくらでも追加できる。&lt;/p&gt;



            &lt;p&gt;強いていう課題としては&lt;a href=&quot;https://github.com/metosin/reitit/issues/84&quot;&gt;OpenAPI 3のサポートはまだ&lt;/a&gt;というところかな…&lt;/p&gt;



            &lt;h2&gt;しめ&lt;/h2&gt;



            &lt;p&gt;reititはmetosin製だけあってClojureのライブラリの中でしっかりと継続的にメンテされて、使っているコミュニティも活発なので今日明日で捨てられもしないだろう。そこにパフォーマンスと機能の豊富さを加えると、いかにもプロダクションで使っていいライブラリだと明らか。使っているし。&lt;/p&gt;</content>
        <author>
            <name>valerauko</name>
            <uri>https://blog.valerauko.net</uri>
        </author>
        <source>
            <title type="html">valeblog</title>
            <link rel="self" href="https://blog.valerauko.net/feed/"/>
            <id>https://blog.valerauko.net</id>
        </source>
    </entry>

    <entry>
        <title type="html">A test program</title>
        <link href="http://www.learningclojure.com/2021/12/a-test-program.html"/>
        <id>tag:blogger.com,1999:blog-7056990295646173627.post-6206240976550772654</id>
        <updated>2021-12-02T19:44:07+00:00</updated>
        <content type="html">&lt;pre class=&quot;clojure-body&quot;&gt;&lt;br /&gt;&lt;span class=&quot;type&quot;&gt;#!&lt;/span&gt;/usr/bin/env clojure&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;It looks like clojure has become a full citizen of Debian&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;In emacs, a syntax highlighted program can be converted to html with htmlize-buffer, and then if&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;you top and tail that and copy it to blogger it comes up nicely. And this seems to still be&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;working after all this time&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;So here is my first published clojure program for a while...&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;If you're using Debian 11, you can run it by installing clojure with&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;$ sudo apt install clojure&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;saving this file as test.clj&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;and then in a terminal window making the file executable&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;$ chmod +x test.clj&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;and then running it&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;$ ./test.clj&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;(println &lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;)&lt;br /&gt;&lt;br /&gt;(&lt;span class=&quot;keyword&quot;&gt;defn&lt;/span&gt; &lt;span class=&quot;function-name&quot;&gt;factorial&lt;/span&gt; [n]&lt;br /&gt;  (&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&amp;lt; n 1) 1&lt;br /&gt;      (* n (factorial (- n 1)))))&lt;br /&gt;&lt;br /&gt;(println '(factorial 10) (factorial 10))&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;If all is working then you should see something like&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;$ ./test.clj&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;hello&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;comment-delimiter&quot;&gt;;; &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;(factorial 10) 3628800&lt;br /&gt;&lt;/span&gt;&lt;/pre&gt;</content>
        <author>
            <name>John Lawrence Aspden</name>
            <email>noreply@blogger.com</email>
            <uri>http://www.learningclojure.com/</uri>
        </author>
        <source>
            <title type="html">Learning Clojure</title>
            <link rel="self" href="http://www.blogger.com/feeds/7056990295646173627/posts/default"/>
            <id>tag:blogger.com,1999:blog-7056990295646173627</id>
        </source>
    </entry>

    <entry>
        <title type="html">Emacs, even</title>
        <link href="http://www.learningclojure.com/2021/12/emacs-even.html"/>
        <id>tag:blogger.com,1999:blog-7056990295646173627.post-2652882505347121611</id>
        <updated>2021-12-02T19:29:14+00:00</updated>
        <content type="html">&lt;p&gt;The truly terrifying bit of getting any language to work on your machine is getting it to work with EMACS. &lt;/p&gt;&lt;p&gt;Last time I tried to get clojure working, this was the stage that I gave up at. Everything was just broken, and so I wrote the program I was going to write in python instead.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;But all it took this time was:&lt;/p&gt;&lt;p&gt;(Emacs 27.1, the version that comes with Debian 11/Bullseye)&lt;/p&gt;&lt;p&gt;&lt;b&gt;M-x package install&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;clojure-mode&lt;/b&gt;&lt;/p&gt;&lt;p&gt;(churn)&lt;/p&gt;&lt;p&gt;and then I can load my test.clj program from earlier, and it's syntax highlighted. &lt;/p&gt;&lt;p&gt;&lt;b&gt;M-x package-list-packages&lt;/b&gt;&lt;/p&gt;&lt;p&gt;tells me that it's clojure-mode 5.13.0, from melpa-stable .&lt;br /&gt;&lt;/p&gt;&lt;p&gt;I can save the program, and run &lt;/p&gt;&lt;p&gt;&lt;b&gt;./test.clj &lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;from the command line in a terminal, and it just works, with a slightly irritating 2 second delay.&lt;/p&gt;&lt;p&gt;I might hope for more:&lt;/p&gt;&lt;p&gt;I remember once I could do things like putting the cursor in an expression and pressing Alt-Ctrl-x to evaluate that expression in a running REPL.&lt;/p&gt;&lt;p&gt;but this will do for now. &lt;/p&gt;&lt;p&gt;I can always copy and paste things to a REPL, after all.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content>
        <author>
            <name>John Lawrence Aspden</name>
            <email>noreply@blogger.com</email>
            <uri>http://www.learningclojure.com/</uri>
        </author>
        <source>
            <title type="html">Learning Clojure</title>
            <link rel="self" href="http://www.blogger.com/feeds/7056990295646173627/posts/default"/>
            <id>tag:blogger.com,1999:blog-7056990295646173627</id>
        </source>
    </entry>

    <entry>
        <title type="html" xml:lang="en-us">Go Time 208: Our first decade with Go</title>
        <link href="https://changelog.com/gotime/208"/>
        <id>https://changelog.com/changelog.com/2/1490</id>
        <updated>2021-12-02T17:00:00+00:00</updated>
        <content type="html">&lt;p&gt;We’ve talked several times about getting started with Go. But Go is already 12 years old! Let’s talk about how it all started, and hear about it from the people who were there from the beginning.&lt;/p&gt;

            &lt;p&gt;&lt;a href=&quot;https://changelog.com/gotime/208/discuss&quot;&gt;Discuss on Changelog News&lt;/a&gt;&lt;/p&gt;

            &lt;p&gt;&lt;a href=&quot;https://changelog.com/++&quot; rel=&quot;payment&quot;&gt;Join Changelog++&lt;/a&gt; to support our work, get closer to the metal, and make the ads disappear!&lt;/p&gt;

            &lt;p&gt;Sponsors&lt;/p&gt;
            &lt;p&gt;
            &lt;/p&gt;&lt;ul&gt;

            &lt;li&gt;
            &lt;a href=&quot;https://goteleport.com/&quot;&gt;Teleport&lt;/a&gt; – &lt;strong&gt;Securely access any computing resource anywhere.&lt;/strong&gt; Engineers and security teams can unify access to SSH servers, Kubernetes clusters, web applications, and databases across all environments. Try Teleport today in the cloud, self-hosted, or open source at &lt;a href=&quot;https://goteleport.com&quot;&gt;goteleport.com&lt;/a&gt;

            &lt;/li&gt;

            &lt;li&gt;
            &lt;a href=&quot;https://launchdarkly.com/?utm_source=changelog&amp;amp;utm_medium=podcast&amp;amp;utm_campaign=changelog-sponsorship&quot;&gt;LaunchDarkly&lt;/a&gt; – &lt;strong&gt;Fundamentally change how you deliver software.&lt;/strong&gt; Innovate faster, deploy fearlessly, and make each release a masterpiece.

            &lt;/li&gt;

            &lt;li&gt;
            &lt;a href=&quot;https://metal.equinix.com/justaddmetal&quot;&gt;Equinix Metal&lt;/a&gt; – If you want the choice and control of hardware…with low overhead…and the developer experience of the cloud – you need to check out Equinix Metal. Deploy in minutes across 18 global locations, from Silicon Valley to Sydney. Visit &lt;a href=&quot;https://metal.equinix.com/justaddmetal&quot;&gt;metal.equinix.com/justaddmetal&lt;/a&gt; and receive $100 credit to play.

            &lt;/li&gt;

            &lt;li&gt;
            &lt;a href=&quot;https://fastly.com/podcast&quot;&gt;Fastly&lt;/a&gt; – &lt;strong&gt;Compute@Edge free for 3 months&lt;/strong&gt; — plus up to $100k a month in credit for an additional 6 months. Fastly’s Edge cloud network and modern approach to serverless computing allows you to deploy and run complex logic at the edge with unparalleled security and blazing fast computational speed. &lt;a href=&quot;https://fastly.com/podcast&quot;&gt;Head to fastly.com/podcast&lt;/a&gt; to take advantage of this limited time promotion!

            &lt;/li&gt;

            &lt;/ul&gt;
            &lt;p&gt;&lt;/p&gt;




            &lt;p&gt;Featuring&lt;/p&gt;
            &lt;p&gt;
            &lt;/p&gt;&lt;ul&gt;

            &lt;li&gt;Miki Tebeka – &lt;a href=&quot;https://twitter.com/tebeka&quot; rel=&quot;external ugc&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;https://github.com/tebeka&quot; rel=&quot;external ugc&quot;&gt;GitHub&lt;/a&gt;, &lt;a href=&quot;https://www.linkedin.com/in/mikitebeka&quot; rel=&quot;external ugc&quot;&gt;LinkedIn&lt;/a&gt;, &lt;a href=&quot;https://www.353solutions.com&quot; rel=&quot;external ugc&quot;&gt;Website&lt;/a&gt;&lt;/li&gt;

            &lt;li&gt;Roger Peppe – &lt;a href=&quot;https://twitter.com/rogpeppe&quot; rel=&quot;external ugc&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;https://github.com/rogpeppe&quot; rel=&quot;external ugc&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt;

            &lt;li&gt;Natalie Pistunovich – &lt;a href=&quot;https://twitter.com/nataliepis&quot; rel=&quot;external ugc&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;https://github.com/Pisush&quot; rel=&quot;external ugc&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt;

            &lt;li&gt;Johnny Boursiquot – &lt;a href=&quot;https://twitter.com/jboursiquot&quot; rel=&quot;external ugc&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;https://github.com/jboursiquot&quot; rel=&quot;external ugc&quot;&gt;GitHub&lt;/a&gt;, &lt;a href=&quot;https://www.jboursiquot.com/&quot; rel=&quot;external ugc&quot;&gt;Website&lt;/a&gt;&lt;/li&gt;

            &lt;/ul&gt;
            &lt;p&gt;&lt;/p&gt;

            &lt;p&gt;Notes and Links&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;http://www.gotw.ca/publications/concurrency-ddj.htm&quot;&gt;The free lunch is over&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/C10k_problem&quot;&gt;The C10K problem&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://www.selenium.dev/&quot;&gt;Selenium&lt;/a&gt; and &lt;a href=&quot;https://github.com/tebeka/selenium&quot;&gt;Go’s bindings&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://pkg.go.dev/testing#T.Parallel&quot;&gt;t.Parallel()&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/library/asyncio.html&quot;&gt;Python’s asyncio&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://go.dev/conduct&quot;&gt;Go Community Code of Conduct&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;Roger talking about the acme editor in &lt;a href=&quot;https://about.sourcegraph.com/blog/dev-tool-time-roger-peppe/&quot;&gt;Dev Tool Time&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;Miki was trying &lt;a href=&quot;https://clojure.org/&quot;&gt;Clojure&lt;/a&gt; and &lt;a href=&quot;https://www.erlang.org/&quot;&gt;Erlang&lt;/a&gt; before settling on Go&lt;/li&gt;
            &lt;/ul&gt;</content>
        <author>
            <name>The Changelog</name>
            <uri>https://changelog.com/</uri>
        </author>
        <source>
            <title type="html">Changelog</title>
            <subtitle type="html">News and podcasts for developers</subtitle>
            <link rel="self" href="https://changelog.com/feed"/>
            <id>https://changelog.com/</id>
            <rights type="html">All rights reserved</rights>
        </source>
    </entry>

    <entry>
        <title type="html" xml:lang="en-us">Advent of Code: Day 2</title>
        <link href="https://andreyorst.gitlab.io/posts/2021-12-02-advent-of-code-day-2/"/>
        <id>https://andreyorst.gitlab.io/posts/2021-12-02-advent-of-code-day-2/</id>
        <updated>2021-12-02T06:34:00+00:00</updated>
        <content type="html">&lt;p&gt;Day 1 was not that hard, let’s see how the day 2 puzzle goes!
            I’m going to continue solving tasks as early as possible for me, but I’ve decided to publish respecting posts a bit later the day, so I won’t spoil solutions to anyone who reads me and also participates in AoC.
            OK, back to the task!&lt;/p&gt;
            &lt;h2 id=&quot;dive&quot;&gt;Dive!&lt;/h2&gt;
            &lt;p&gt;&lt;a href=&quot;https://adventofcode.com/2021/day/2&quot;&gt;Today’s task&lt;/a&gt; is about navigating a submarine.
            If I remember correctly, something similar was in the last year’s AoC.
            This year, we’re given a set of instructions in the following form:&lt;/p&gt;
            &lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;forward 5
            down 5
            forward 8
            up 3
            down 8
            forward 2
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Where &lt;code&gt;forward&lt;/code&gt; increases the horizontal position, and &lt;code&gt;up&lt;/code&gt; and &lt;code&gt;donw&lt;/code&gt; decrease and increase depth respectively.
            Our goal is to compute the end coordinate and then compute its product, after following all these commands.
            Let’s write a function that accepts the current position, direction, and the amount we need to move as a vector.&lt;/p&gt;
            &lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day1&amp;gt;&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;ns &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day2&lt;/span&gt;)
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;nil&lt;/span&gt;
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day2&amp;gt;&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;defmulti &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;move&lt;/span&gt; (&lt;span style=&quot;font-weight: bold;&quot;&gt;fn &lt;/span&gt;[&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;_&lt;/span&gt; [&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;direction&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;_&lt;/span&gt;]] &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;direction&lt;/span&gt;))
            #&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;'day2/move&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I’ve decided to use a multimethod here.
            Multimethods in Clojure are simple functions, that dispatch to a concrete body based on the dispatching function.
            This can be done by hand in any other language, in Clojure, the dispatching process is automated for you.
            I’ve chosen a multimethod without any particular reason, I just thought that it will be handy if we will be able to add new behavior to already existing function.&lt;/p&gt;
            &lt;p&gt;So let’s write movement methods.
            Since our input is a string, we will dispatch on strings, representing the direction:&lt;/p&gt;
            &lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day2&amp;gt;&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;defmethod &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;move&lt;/span&gt; &lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;forward&quot;&lt;/span&gt; [[&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;x&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;y&lt;/span&gt;] [&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;_&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;amount&lt;/span&gt;]] [(&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;+ &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;x&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;amount&lt;/span&gt;) &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;y&lt;/span&gt;])
            #&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;multifn&lt;/span&gt;[&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;move&lt;/span&gt; 0&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;x23444b67&lt;/span&gt;]
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day2&amp;gt;&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;defmethod &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;move&lt;/span&gt; &lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;up&quot;&lt;/span&gt; [[&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;x&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;y&lt;/span&gt;] [&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;_&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;amount&lt;/span&gt;]] [&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;x&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;- &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;y&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;amount&lt;/span&gt;)])
            #&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;multifn&lt;/span&gt;[&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;move&lt;/span&gt; 0&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;x23444b67&lt;/span&gt;]
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day2&amp;gt;&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;defmethod &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;move&lt;/span&gt; &lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;down&quot;&lt;/span&gt; [[&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;x&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;y&lt;/span&gt;] [&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;_&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;amount&lt;/span&gt;]] [&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;x&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;+ &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;y&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;amount&lt;/span&gt;)])
            #&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;multifn&lt;/span&gt;[&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;move&lt;/span&gt; 0&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;x23444b67&lt;/span&gt;]
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We’re simply expressing the movement rules from the task.
            Let’s try it on the example input:&lt;/p&gt;
            &lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day2&amp;gt;&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;-&amp;gt; &lt;/span&gt;[0 0]
            (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;move&lt;/span&gt; [&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;forward&quot;&lt;/span&gt; 5])
            (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;move&lt;/span&gt; [&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;down&quot;&lt;/span&gt; 5])
            (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;move&lt;/span&gt; [&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;forward&quot;&lt;/span&gt; 8])
            (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;move&lt;/span&gt; [&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;up&quot;&lt;/span&gt; 3])
            (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;move&lt;/span&gt; [&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;down&quot;&lt;/span&gt; 8])
            (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;move&lt;/span&gt; [&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;forward&quot;&lt;/span&gt; 2]))
            [15 10]
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This gives us the correct coordinate and multiplying its &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; parts produces the expected result of &lt;code&gt;150&lt;/code&gt;.
            Now we need to read the real input and transform it into such form: &lt;code&gt;[[direction amount] ...]&lt;/code&gt;, but this time, let’s write a proper &lt;code&gt;parse-long&lt;/code&gt; function:&lt;/p&gt;
            &lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day2&amp;gt;&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;ns &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;aoc-commons&lt;/span&gt;)
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;nil&lt;/span&gt;
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;aoc-commons&amp;gt;&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;defn &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;parse-long&lt;/span&gt; [&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;s&lt;/span&gt;]
            (&lt;span style=&quot;font-weight: bold;&quot;&gt;if &lt;/span&gt;(&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;string? &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;s&lt;/span&gt;)
            (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;try&lt;/span&gt;
            (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;Long/valueOf&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;s&lt;/span&gt;)
            (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;NumberFormatException&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;_&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;nil&lt;/span&gt;))
            (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;throw&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;IllegalArgumentException.&lt;/span&gt;
            (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;format&lt;/span&gt; &lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;Expected string, got %s&quot;&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;some-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;s&lt;/span&gt; &lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;class &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;.getName&lt;/span&gt;))))))
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I’m putting it to the &lt;code&gt;aoc-commons&lt;/code&gt; namespace, so I could reuse it in another days.
            Luckily this function will soon be available in the next Clojure release.&lt;/p&gt;
            &lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;aoc-commons&amp;gt;&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;in-ns &lt;/span&gt;&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;'day2&lt;/span&gt;)
            #&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;namespace&lt;/span&gt;[&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day2&lt;/span&gt;]
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day2&amp;gt;&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;require&lt;/span&gt; '[&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;commons&lt;/span&gt; &lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;:refer&lt;/span&gt; [&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;parse-long&lt;/span&gt;]]
            '[&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;clojure.string&lt;/span&gt; &lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;:as&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;str&lt;/span&gt;])
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;nil&lt;/span&gt;
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day2&amp;gt;&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;inputs/day2&quot;&lt;/span&gt;
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;slurp&lt;/span&gt;
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;str/split-lines&lt;/span&gt;
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;map &lt;/span&gt;#(&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;str/split&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;%&lt;/span&gt; #&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;\s+&quot;&lt;/span&gt;))
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;map &lt;/span&gt;#(&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;update&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;%&lt;/span&gt; 1 &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;parse-long&lt;/span&gt;))
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;take &lt;/span&gt;3))
            ([&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;forward&quot;&lt;/span&gt; 7] [&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;forward&quot;&lt;/span&gt; 9] [&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;forward&quot;&lt;/span&gt; 9])
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Seems to work so far - let’s put it into the function &lt;code&gt;read-input&lt;/code&gt;.
            Now we need to automate the computation we did earlier.
            Again, similarly to the previous day’s task, &lt;code&gt;reduce&lt;/code&gt; is the function we need:&lt;/p&gt;
            &lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day2&amp;gt;&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;defn &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;part-1&lt;/span&gt; [&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;input&lt;/span&gt;]
            (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;input&lt;/span&gt;
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;reduce &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;move&lt;/span&gt; [0 0])
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;apply &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;*&lt;/span&gt;)))
            #&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;'day2/part-1&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let’s plug the input, and see if it produces the correct answer:&lt;/p&gt;
            &lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day2&amp;gt;&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;part-1&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;read-input&lt;/span&gt;))
            2036120
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And this is indeed the answer we’re expected to get!
            Let’s move to part two.&lt;/p&gt;
            &lt;h3 id=&quot;part-two&quot;&gt;Part two&lt;/h3&gt;
            &lt;p&gt;Last year, we misinterpreted the movement instructions, which required us to rework the algorithm a bit, and accord for the rotation.
            This year the situation is very similar.
            Turns out that &lt;code&gt;up&lt;/code&gt; and &lt;code&gt;down&lt;/code&gt; change the &lt;code&gt;aim&lt;/code&gt; parameter, and &lt;code&gt;forward&lt;/code&gt; moves accordingly to it, by multiplying &lt;code&gt;aim&lt;/code&gt; to the amount we need to move forward and adding it to the depth.
            Let’s rewrite the moving function:&lt;/p&gt;
            &lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day2&amp;gt;&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;defn &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;move-and-aim&lt;/span&gt; [[&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;x&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;y&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;aim&lt;/span&gt;] [&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;direction&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;amount&lt;/span&gt;]]
            (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;direction&lt;/span&gt;
            &lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;up&quot;&lt;/span&gt; [&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;x&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;y&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;- &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;aim&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;amount&lt;/span&gt;)]
            &lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;down&quot;&lt;/span&gt; [&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;x&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;y&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;+ &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;aim&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;amount&lt;/span&gt;)]
            &lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;forward&quot;&lt;/span&gt; [(&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;+ &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;x&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;amount&lt;/span&gt;) (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;+ &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;y&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;aim&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;amount&lt;/span&gt;)) &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;aim&lt;/span&gt;]))
            #&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;'day2/move-and-aim&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since we know, that we won’t need to expand our movement, and we only needed to change how we move.
            Multimethod was overkill after all, but, well, you never know.
            The main difference between this way of doing the dispatch, and when using the multimethod, is that we can extend the behavior of the multimethod without modifying the existing code.
            In the case of this function, if we were to add, say, &lt;code&gt;backward&lt;/code&gt;, we would need to change the source code of this function.
            With multimethods, we would just add another &lt;code&gt;defmethod&lt;/code&gt;.
            But in the case of this particular situation there’s no need for it, so &lt;code&gt;case&lt;/code&gt; will do.&lt;/p&gt;
            &lt;p&gt;Let’s plug it into &lt;code&gt;reduce&lt;/code&gt;:&lt;/p&gt;
            &lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day2&amp;gt;&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;read-input&lt;/span&gt;)
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;reduce &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;move-and-aim&lt;/span&gt; [0 0 0])
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;apply &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;*&lt;/span&gt;))
            2196947010440
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And… this is not the correct result.
            Why?
            let’s see, we’re producing seemingly correct coordinates on the test input:&lt;/p&gt;
            &lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day2&amp;gt;&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;reduce &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;move-and-aim&lt;/span&gt;
            [0 0 0]
            [[&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;forward&quot;&lt;/span&gt; 5] [&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;down&quot;&lt;/span&gt; 5] [&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;forward&quot;&lt;/span&gt; 8] [&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;up&quot;&lt;/span&gt; 3] [&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;down&quot;&lt;/span&gt; 8] [&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;forward&quot;&lt;/span&gt; 2]])
            [15 60 10]
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And multiplying &lt;code&gt;15&lt;/code&gt; and &lt;code&gt;60&lt;/code&gt; produces the correct answer for the example input.
            So why it is not correct when applied to the real input?
            Let’s plug the test input into our previous code:&lt;/p&gt;
            &lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day2&amp;gt;&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; [[&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;forward&quot;&lt;/span&gt; 5] [&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;down&quot;&lt;/span&gt; 5] [&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;forward&quot;&lt;/span&gt; 8] [&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;up&quot;&lt;/span&gt; 3] [&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;down&quot;&lt;/span&gt; 8] [&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;&quot;forward&quot;&lt;/span&gt; 2]]
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;reduce &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;move-and-aim&lt;/span&gt; [0 0 0])
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;apply &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;*&lt;/span&gt;))
            9000
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It is indeed incorrect.
            But now I see the issue, I forgot that we’re multiplying all elements in the resulting vector, and now this vector has a third element - the &lt;code&gt;aim&lt;/code&gt;.
            And in the case of the test input, it is equal to &lt;code&gt;10&lt;/code&gt;, thus the result is ten times bigger than the expected one.
            Let’s remove it before computing the result with &lt;code&gt;take&lt;/code&gt;:&lt;/p&gt;
            &lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day2&amp;gt;&lt;/span&gt; (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;defn &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;part-2&lt;/span&gt; [&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;input&lt;/span&gt;]
            (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;input&lt;/span&gt;
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;reduce &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;move-and-aim&lt;/span&gt; [0 0 0])
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;take &lt;/span&gt;2)
            (&lt;span style=&quot;font-weight: bold; font-style: italic;&quot;&gt;apply &lt;/span&gt;&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;*&lt;/span&gt;)))
            #&lt;span style=&quot;color: #666; font-style: italic;&quot;&gt;'day2/part-2&lt;/span&gt;
            &lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;day2&amp;gt;&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;part-2&lt;/span&gt; (&lt;span style=&quot;color: #666; font-weight: bold; font-style: italic;&quot;&gt;read-input&lt;/span&gt;))
            2015547716
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, that’s the correct result.&lt;/p&gt;
            &lt;h2 id=&quot;day-2-thoughts&quot;&gt;Day 2 thoughts&lt;/h2&gt;
            &lt;p&gt;The task wasn’t hard.
            I’ve made a simple mistake at the end when I’ve computed the product of depth and horizontal coordinate and forgot to remove the &lt;code&gt;aim&lt;/code&gt; from the equation.
            Multimethod was a bit overkill, but I think it’s still a nice way to show that the same thing can be achieved in two ways, and one is a more general version of another.&lt;/p&gt;
            &lt;p&gt;Now, when I think of it, it seems that I tend to use tuples far more than dictionaries.
            For example, I could use an associative structure with &lt;code&gt;:depth&lt;/code&gt;, and &lt;code&gt;:horizontal&lt;/code&gt; keys in it, and completely avoid the bug with multiplication, and any calls to &lt;code&gt;apply&lt;/code&gt; for that matter.
            Maybe I should think more in terms of associative structures for the next tasks.&lt;/p&gt;
            &lt;p&gt;Other than that, the task was pretty straightforward, and I’m curious to see what’s coming next.
            See you the next day!&lt;/p&gt;</content>
        <author>
            <name>Andrey Listopadov</name>
            <uri>https://andreyorst.gitlab.io/</uri>
        </author>
        <source>
            <title type="html">Andrey Listopadov</title>
            <subtitle type="html">Posts from Andrey Listopadov</subtitle>
            <link rel="self" href="https://andreyorst.gitlab.io/feed.xml"/>
            <id>https://andreyorst.gitlab.io/</id>
            <rights type="html">Andrey Listopadov 2020-2021 - This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</rights>
        </source>
    </entry>

    <entry>
        <title type="html" xml:lang="en-gb">Clojure Deref (Dec 2, 2021)</title>
        <link href="https://clojure.org/news/2021/12/02/deref"/>
        <id>https://clojure.org/news/2021/12/02/deref</id>
        <updated>2021-12-02T06:00:00+00:00</updated>
        <content type="html">&lt;div id=&quot;preamble&quot;&gt;
            &lt;div class=&quot;sectionbody&quot;&gt;
            &lt;div class=&quot;paragraph&quot;&gt;
            &lt;p&gt;Welcome to the Clojure Deref! This is a weekly link/news roundup for the Clojure ecosystem. (&lt;a href=&quot;https://twitter.com/ClojureDeref&quot;&gt;@ClojureDeref&lt;/a&gt; &lt;a href=&quot;https://clojure.org/feed.xml&quot;&gt;RSS&lt;/a&gt;)&lt;/p&gt;
            &lt;/div&gt;
            &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;sect1&quot;&gt;
            &lt;h2 id=&quot;_highlights&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://clojure.org/feed.xml#_highlights&quot;&gt;&lt;/a&gt;Highlights&lt;/h2&gt;
            &lt;div class=&quot;sectionbody&quot;&gt;
            &lt;div class=&quot;paragraph&quot;&gt;
            &lt;p&gt;We have had way too few Clojure conferences of late, but the next 2 days (Dec 3-4) is your chance to attend re:Clojure 2021 online! You can find the full schedule at &lt;a class=&quot;bare&quot; href=&quot;https://www.reclojure.org&quot;&gt;https://www.reclojure.org&lt;/a&gt; and there will be keynotes from Stephen Wolfram, designer of the Wolfram Language and author of &quot;A New Kind of Science&quot;, and from Gerald Jay Sussman, co-creator of the Scheme programming language, co-author of the legendary &quot;Structure and Interpretation of Computer
            Programs&quot; and most recently &quot;Software Design for Flexibility&quot;. Be sure to check out the &lt;a href=&quot;https://pod.link/1471141263&quot;&gt;speaker interview series&lt;/a&gt; too.&lt;/p&gt;
            &lt;/div&gt;
            &lt;div class=&quot;paragraph&quot;&gt;
            &lt;p&gt;Get your free ticket here: &lt;a class=&quot;bare&quot; href=&quot;https://www.meetup.com/London-Clojurians/events/281970268&quot;&gt;https://www.meetup.com/London-Clojurians/events/281970268&lt;/a&gt;&lt;/p&gt;
            &lt;/div&gt;
            &lt;div class=&quot;paragraph&quot;&gt;
            &lt;p&gt;Also, check out the Clojure Data Science Special on Sunday Dec 5th: &lt;a class=&quot;bare&quot; href=&quot;https://www.meetup.com/London-Clojurians/events/282409187&quot;&gt;https://www.meetup.com/London-Clojurians/events/282409187&lt;/a&gt;&lt;/p&gt;
            &lt;/div&gt;
            &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;sect1&quot;&gt;
            &lt;h2 id=&quot;_in_the_core&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://clojure.org/feed.xml#_in_the_core&quot;&gt;&lt;/a&gt;In the core&lt;/h2&gt;
            &lt;div class=&quot;sectionbody&quot;&gt;
            &lt;div class=&quot;paragraph&quot;&gt;
            &lt;p&gt;Post 1.11.0-alpha3, we’ve had several questions about clojure.java.math and have prepped some follow-ups, which include a &lt;a href=&quot;https://clojure.atlassian.net/browse/CLJ-2672&quot;&gt;docstring fix&lt;/a&gt; and some &lt;a href=&quot;https://clojure.atlassian.net/browse/CLJ-2673&quot;&gt;reflective calls&lt;/a&gt; when a few functions were used as higher-order functions (otherwise, they’re inlined so this isn’t an issue). For the latter, we’ll be removing &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; as they are better served by the existing variadic and polymorphic impls in clojure.core. For &lt;code&gt;abs&lt;/code&gt;, we’re going to move that to clojure.core and include it into one of the core numeric functions with support across all the Clojure numeric types (long, double, bigint, bigdec, ratio) - those impls will use Math.abs() where appropriate for best performance.&lt;/p&gt;
            &lt;/div&gt;
            &lt;div class=&quot;paragraph&quot;&gt;
            &lt;p&gt;And finally, there were immediate questions about why clojure.java.math and not clojure.math with a portable impl in ClojureScript. Thanks to the work of Paula Gearon, that seems viable so we’re also planning to make that change for the next alpha. Thanks for the feedback on this - that’s why we do these alphas!&lt;/p&gt;
            &lt;/div&gt;
            &lt;div class=&quot;paragraph&quot;&gt;
            &lt;p&gt;Thanks to a suggestion from Ghadi Shayban, we also &lt;a href=&quot;https://clojure.atlassian.net/browse/CLJ-2670&quot;&gt;looked into&lt;/a&gt; using the java.lang.Math.addExact() etc methods in lieu of the existing Clojure checked non-overflowing math ops (the default when you use +, -, *, inc, dec, etc). The benefit here is that these methods are &quot;intrinsics&quot; in Hotspot and the Java compiler will replace these calls with hand-crafted assembly or IR code. Still needs some more eval, but looks like a nice little boost in default Clojure math.&lt;/p&gt;
            &lt;/div&gt;
            &lt;div class=&quot;paragraph&quot;&gt;
            &lt;p&gt;Big picture, I think we’ll do one more chunk of new feature / bug work and then start the rampdown into a 1.11 GA release, probably within a month.&lt;/p&gt;
            &lt;/div&gt;
            &lt;div class=&quot;paragraph&quot;&gt;
            &lt;p&gt;Fogus has been working on &lt;a href=&quot;https://github.com/cognitect/transit-clj/issues/47&quot;&gt;transit-clj issue #47&lt;/a&gt; off and on and I think that’s getting close to a fix, probably mostly in transit-java. Also, it’s his birthday today - happy birthday Fogus!&lt;/p&gt;
            &lt;/div&gt;
            &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;sect1&quot;&gt;
            &lt;h2 id=&quot;_podcasts_and_videos&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://clojure.org/feed.xml#_podcasts_and_videos&quot;&gt;&lt;/a&gt;Podcasts and videos&lt;/h2&gt;
            &lt;div class=&quot;sectionbody&quot;&gt;
            &lt;div class=&quot;ulist&quot;&gt;
            &lt;ul&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://podcasts.apple.com/us/podcast/re-clojure-interviews-18-gerald-jay-sussman/id1471141263?i=1000543534534&quot;&gt;re:Clojure Interviews 18&lt;/a&gt; - Gerald Jay Sussman&lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ZCq7zDSHbcM&quot;&gt;Clojure Ireland - Science &amp;amp; engineering (How to improve as an engineer)&lt;/a&gt; - Sameer Rahmani&lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ZP4KEPziObA&quot;&gt;Advent of Witchcraft - part 1 (Clojure + Minecraft)&lt;/a&gt; - Arne Brasseur&lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=lUW-ljgieTE&quot;&gt;Advent of Code 2021 Day 1&lt;/a&gt; - Nikita Prokopov&lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=uICA2SDa-ws&quot;&gt;Scicloj status report: Notespace, 2021-11-29&lt;/a&gt; -&lt;/p&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;/div&gt;
            &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;sect1&quot;&gt;
            &lt;h2 id=&quot;_blogs&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://clojure.org/feed.xml#_blogs&quot;&gt;&lt;/a&gt;Blogs&lt;/h2&gt;
            &lt;div class=&quot;sectionbody&quot;&gt;
            &lt;div class=&quot;ulist&quot;&gt;
            &lt;ul&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://freeston.me/posts/2021-11-29-new-site-generator/&quot;&gt;I wrote myself a static site generator&lt;/a&gt; - Dominic Freeston&lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://corfield.org/blog/2021/11/28/deps-edn-monorepo-8/&quot;&gt;deps.edn and monorepos VIII (Polylith)&lt;/a&gt; - Sean Corfield&lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://www.arthurbrrs.me/my-clojure-script-journey.html&quot;&gt;My Clojure(script) journey&lt;/a&gt; - Arthur Barroso&lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://cuddly-octo-palm-tree.com/posts/2021-11-28-clj-primes-2/&quot;&gt;Primes in Clojure part 2: Interop&lt;/a&gt; - Gary Verhaegen&lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://stokoe.me/summary-hammock-driven-development/&quot;&gt;What is Hammock Driven Development?&lt;/a&gt; - Keagan Stokoe&lt;/p&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;/div&gt;
            &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;sect1&quot;&gt;
            &lt;h2 id=&quot;_libraries_and_tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://clojure.org/feed.xml#_libraries_and_tools&quot;&gt;&lt;/a&gt;Libraries and Tools&lt;/h2&gt;
            &lt;div class=&quot;sectionbody&quot;&gt;
            &lt;div class=&quot;paragraph&quot;&gt;
            &lt;p&gt;New releases and tools this week:&lt;/p&gt;
            &lt;/div&gt;
            &lt;div class=&quot;ulist&quot;&gt;
            &lt;ul&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://calva.io&quot;&gt;Calva&lt;/a&gt; v2.0.228 - Calva is an integrated REPL powered environment for enjoyable and productive Clojure and ClojureScript development in Visual Studio Code. However…​ Peter requested that if you are interested in helping to debug the new Parinfer support, you can use version 2.0.227 - &lt;a href=&quot;https://twitter.com/pappapez/status/1461018167002734592&quot;&gt;read more here&lt;/a&gt;.&lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://github.com/clj-kondo/clj-kondo&quot;&gt;clj-kondo&lt;/a&gt; 2021.12.01 - A linter for Clojure code that sparks joy&lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://github.com/DeLaGuardo/setup-clojure&quot;&gt;setup-clojure&lt;/a&gt; 3.6 - GitHub Action to provision clojure’s most popular build tools for Linux, Mac OS X and Windows&lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://clojure.org/releases/tools&quot;&gt;Clojure CLI&lt;/a&gt; &lt;a href=&quot;https://clojure.org/releases/tools#v1.10.3.1040&quot;&gt;1.10.3.1040&lt;/a&gt; - Command line tools for Clojure&lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://clojure-lsp.io/&quot;&gt;clojure-lsp&lt;/a&gt; &lt;a href=&quot;https://github.com/clojure-lsp/clojure-lsp/releases/tag/2021.12.01-12.28.16&quot;&gt;2021.12.01-12.28.16&lt;/a&gt; - A Language Server for Clojure(script)&lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://github.com/lambdaisland/witchcraft&quot;&gt;witchcraft&lt;/a&gt; 0.6.150 - Clojure API for manipulating Minecraft, based on Bukkit&lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://gitlab.com/domaindrivenarchitecture/c4k-nextcloud&quot;&gt;c4k-nextcloud&lt;/a&gt;  - c4k-nextcloud provides a k8s deployment for nextcloud&lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://github.com/lread/test-doc-blocks&quot;&gt;test-doc-blocks&lt;/a&gt; v1.0.166-alpha - Test AsciiDoc and CommonMark code blocks found in articles and docstrings&lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://github.com/juxt/clip&quot;&gt;clip&lt;/a&gt; 0.26.0 - Light structure and support for dependency injection&lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://github.com/seancorfield/honeysql&quot;&gt;honeysql&lt;/a&gt; 2.1.829 - Turn Clojure data structures into SQL&lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://github.com/babashka/tools-deps-native&quot;&gt;tools-deps-native&lt;/a&gt; &lt;a href=&quot;https://github.com/babashka/tools-deps-native/releases/tag/v0.0.4&quot;&gt;v0.0.4&lt;/a&gt; - Run tools-deps-alpha as a native binary&lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://github.com/babashka/fs&quot;&gt;fs&lt;/a&gt; v0.1.2 - File system utility library&lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://github.com/babashka/babashka&quot;&gt;babashka&lt;/a&gt; 0.6.6 - Native, fast starting Clojure interpreter for scripting&lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://github.com/Cyrik/omni-trace&quot;&gt;omni-trace&lt;/a&gt; 0.2.2 - Omnipotent/omniscient tracing core for debugging clojure(script)&lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://github.com/fulcrologic/guardrails&quot;&gt;guardrails&lt;/a&gt; 1.1.9 - A middle ground between unguarded functions and enforced spec instrumentation&lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://github.com/fulcrologic/fulcro-rad&quot;&gt;fulcro-rad&lt;/a&gt; 1.1.0-RC8 - Fulcro Rapid Application Development&lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://github.com/seancorfield/deps-new&quot;&gt;deps-new&lt;/a&gt; &lt;a href=&quot;https://github.com/seancorfield/deps-new/releases/tag/v0.4.3&quot;&gt;0.4.3&lt;/a&gt; - A new, simpler alternative to clj-new&lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://github.com/tonyaldon/clojure-site-org-mode&quot;&gt;clojure-site-org-mode&lt;/a&gt;  - The documentation of &lt;a class=&quot;bare&quot; href=&quot;https://clojure.org/&quot;&gt;https://clojure.org/&lt;/a&gt; converted into a single org-mode file&lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;https://github.com/tonyaldon/clojurescript-site-org-mode&quot;&gt;clojurescript-site-org-mode&lt;/a&gt;  - The documentation of &lt;a class=&quot;bare&quot; href=&quot;https://clojurescript.org/&quot;&gt;https://clojurescript.org/&lt;/a&gt; converted into a single org-mode file&lt;/p&gt;
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;/div&gt;
            &lt;/div&gt;
            &lt;/div&gt;</content>
        <author>
            <name>Clojure.org</name>
            <uri>https://clojure.org</uri>
        </author>
        <source>
            <title type="html">Clojure News</title>
            <subtitle type="html">Clojure News</subtitle>
            <link rel="self" href="https://clojure.org/feed.xml"/>
            <id>https://clojure.org</id>
        </source>
    </entry>

    <entry>
        <title type="html">Reveal stickers</title>
        <link href="https://vlaaad.github.io/reveal-stickers"/>
        <id>https://vlaaad.github.io/reveal-stickers</id>
        <updated>2021-12-02T00:00:00+00:00</updated>
        <content type="html">&lt;p&gt;The year is 2011. “It’s just a jar”, you say to your colleagues, adding Clojure to the classpath. They look at you with disbelief as you cackle diabolically, and open a real-time chat with Mrs. Eval, a witch of Java Vast Magicland. She gives you the power to debug and fix a running server without ever restarting it again.&lt;/p&gt;

            &lt;p&gt;Present times. “It’s just a jar”, you say to your colleagues, adding Reveal to the classpath. They look at you with disbelief as you cackle diabolically, and your screen opens a vortex directly to the JV Magicland. “I can finally see it with my own eyes” are the last words your colleagues hear from you as you jump into the vortex. Now you are no longer restricted to conjure JVM magic, as well as observe the spells’ effects, through a letter correspondence with Mrs. Eval.&lt;/p&gt;

            &lt;p&gt;Ahem.&lt;/p&gt;

            &lt;p&gt;I made &lt;a href=&quot;https://vlaaad.github.io/reveal/&quot;&gt;Reveal&lt;/a&gt; — Read Eval Visualize Loop for Clojure. One defining property of Reveal is that it runs in the JVM, which allows for some &lt;a href=&quot;https://vlaaad.github.io/reveal/#inspect-object-fields-and-properties&quot;&gt;deep object exploration&lt;/a&gt; capabilities and &lt;a href=&quot;https://vlaaad.github.io/reveal/#ref-watchers&quot;&gt;live views&lt;/a&gt;. This comes with a trade-off.&lt;/p&gt;

            &lt;h1 id=&quot;the-reveal-trade-off&quot;&gt;The Reveal trade-off&lt;/h1&gt;

            &lt;p&gt;The main trade-off when using Reveal is that it comes as an OS window separate from your IDE. This means that when you use it as a REPL, you have to arrange your desktop so your IDE takes roughly 3/4 of the screen, with the Reveal REPL window taking the other 1/4. You have to sacrifice some of your screen space for REPL output that you don’t even need 60% of the time — most REPL evaluation results are small and would be better off inlined in the code buffer. It sucks.&lt;/p&gt;

            &lt;h1 id=&quot;a-new-old-hope&quot;&gt;A new old hope&lt;/h1&gt;

            &lt;p&gt;When I was going through my notes about Reveal, the very first note with an idea of this project describes “a tool that pops up small popup windows (like postit notes/devcards) that are always on top, easily closable and don’t steal focus when created/shown”. This idea started Reveal, and I think there is value in this approach because it’s a non-intrusive overlay that can be easily integrated into existing IDE-based dev workflows. And now Reveal finally works this way! I’m proud to present Reveal stickers — a new approach to developing with Reveal that is released in Reveal Free v1.3.250 and &lt;a class=&quot;buy-button&quot; href=&quot;https://vlaaad.github.io/reveal-pro&quot;&gt;Reveal Pro&lt;/a&gt; v1.3.293.&lt;/p&gt;

            &lt;p&gt;Reveal stickers are small always-on-top windows that you can:&lt;/p&gt;

            &lt;ul&gt;
            &lt;li&gt;create with whatever view you want;&lt;/li&gt;
            &lt;li&gt;arrange on your screen in a place that will be remembered by the window the next time it’s shown;&lt;/li&gt;
            &lt;li&gt;maximize and restore to its designated place with a single keypress;&lt;/li&gt;
            &lt;li&gt;minimize all at once for moments when you need your full focus on IDE.&lt;/li&gt;
            &lt;/ul&gt;

            &lt;p&gt;This allows you to make your IDE take the whole screen while Reveal consumes as little screen space as you want, and you can more easily focus on data explorations that require more screen space. It also makes it more convenient to use Reveal without Reveal REPL or Reveal nREPL middleware, since you can create stickers in the REPL.&lt;/p&gt;

            &lt;p&gt;Let’s see what’s fresh out of the oven:&lt;/p&gt;

            &lt;h1 id=&quot;built-in-stickers&quot;&gt;Built-in stickers&lt;/h1&gt;

            &lt;h2 id=&quot;tap-log&quot;&gt;Tap log&lt;/h2&gt;

            &lt;p&gt;If you don’t use Reveal REPL or Reveal nREPL middleware, at least you should be using tap log, and you should be using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tap&amp;gt;&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;println&lt;/code&gt;. The difference in usefulness for debugging is immense!&lt;/p&gt;

            &lt;p&gt;To show a tap log, you need to invoke &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vlaaad.reveal/tap-log&lt;/code&gt; fn:&lt;/p&gt;

            &lt;div class=&quot;language-clj highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vlaaad.reveal&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;r/tap-log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&ltlt;/div&gt;&lt;/div&gt;

            &lt;p&gt;Then you can make it as small as you want and keep it around on top of your IDE. When you need to inspect some big tapped data structure, you can do so by focusing the window and pressing &lt;kbd&gt;F11&lt;/kbd&gt; (&lt;kbd&gt;Cmd Shift M&lt;/kbd&gt; on mac) to toggle maximized window state.&lt;/p&gt;

            &lt;p&gt;Here is an example showing tap log in a situation where I create an endpoint for a web server and use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tap&amp;gt;&lt;/code&gt; to inspect ring request map in search for a handler param that is supplied in a URI path:&lt;/p&gt;

            &lt;video controls=&quot;&quot;&gt;&lt;source src=&quot;/assets/2021-12-02/tap-log.mp4&quot; type=&quot;video/mp4&quot; /&gt;&amp;lt;/source&amp;gt;&lt;/video&gt;

            &lt;h2 id=&quot;inspect&quot;&gt;Inspect&lt;/h2&gt;

            &lt;p&gt;Sometimes you need to inspect some value that is hard to explore as text. You can open a temporary sticker that can be closed by pressing &lt;kbd&gt;Escape&lt;/kbd&gt;:&lt;/p&gt;
            &lt;div class=&quot;language-clj highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;;; Use vlaaad.reveal/inspect fn to open inspector sticker&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;r/inspect&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all-ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

            &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; It might be easier to use reader tag if you &lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; don't have vlaaad.reveal ns required in current ns&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reveal/inspect&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all-ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
            &lt;p&gt;You can also open inspector popups by pressing &lt;kbd&gt;Shift Enter&lt;/kbd&gt; instead of &lt;kbd&gt;Enter&lt;/kbd&gt; when selecting and Reveal action to execute for some value.&lt;/p&gt;

            &lt;video controls=&quot;&quot;&gt;&lt;source src=&quot;/assets/2021-12-02/inspect.mp4&quot; type=&quot;video/mp4&quot; /&gt;&amp;lt;/source&amp;gt;&lt;/video&gt;

            &lt;h1 id=&quot;custom-stickers&quot;&gt;Custom stickers&lt;/h1&gt;

            &lt;p&gt;Now, this is where things get interesting. You can use and compose various built-in views to create an overlay that matches the system you are developing. Is there some state you always have to mentally keep track of? Maybe an Integrant or Component or Mount system that is either running or not? Make it visible in a small sticker so you can always know (and control!) its current state.&lt;/p&gt;

            &lt;p&gt;Here is an &lt;a href=&quot;https://github.com/vlaaad/reveal/blob/master/examples/e02_integrant_live_system_view.clj&quot;&gt;example&lt;/a&gt;:&lt;/p&gt;

            &lt;video controls=&quot;&quot;&gt;&lt;source src=&quot;/assets/2021-12-02/sticker.mp4&quot; type=&quot;video/mp4&quot; /&gt;&amp;lt;/source&amp;gt;&lt;/video&gt;

            &lt;p&gt;By default, this window will remember its bounds per window title, so it’s easy to define a specialized place for a sticker just by giving it a distinct title.&lt;/p&gt;

            &lt;h1 id=&quot;convert-reveal-repls-to-stickers&quot;&gt;Convert Reveal REPLs to stickers&lt;/h1&gt;

            &lt;p&gt;In the tradition of keeping things as simple as possible, stickers are implemented as a bunch of independent options. While the default presentation for Reveal REPLs is a boring OS window, you can easily convert these to stickers by supplying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:always-on-top true&lt;/code&gt; option, e.g.&lt;/p&gt;

            &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;clj &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;-Sdeps&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{:deps {vlaaad/reveal {:mvn/version &quot;1.3.250&quot;}}}'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; vlaaad.reveal/repl :always-on-top &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
            &lt;p&gt;If you use Reveal as a REPL server, you can add this option to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:args&lt;/code&gt; of a launcher alias, e.g.:&lt;/p&gt;
            &lt;div class=&quot;language-clj highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;:reveal-server&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:exec-fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clojure.core.server/start-server&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:exec-args&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;reveal-server&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:port&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5555&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:accept&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vlaaad.reveal/repl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:args&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:always-on-top&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:server-daemon&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

            &lt;h1 id=&quot;editor-integration&quot;&gt;Editor integration&lt;/h1&gt;

            &lt;p&gt;Now you can easily configure Reveal to play nicely with your IDE setup. What else might be needed? I think some light editor integration can still be useful: some predefined forms that you might want to send to your REPL bound to shortcuts — like the “REPL Command” feature in Cursive. In my experience with using stickers, I found 2 commands useful as a starting point:&lt;/p&gt;

            &lt;h2 id=&quot;inspect-the-last-result&quot;&gt;Inspect the last result&lt;/h2&gt;

            &lt;p&gt;Most of the time, the value you want to inspect is an evaluation result of the latest code form you submitted to REPL. For that, I use the following REPL command:&lt;/p&gt;

            &lt;div class=&quot;language-clj highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reveal/inspect&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;*1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

            &lt;h2 id=&quot;minimizeunminimize-all-stickers-at-once&quot;&gt;Minimize/unminimize all stickers at once&lt;/h2&gt;

            &lt;p&gt;Sometimes you need a full screen space of your IDE. Looking at you merge conflict resolution UI… For that case, I find it useful to have the following REPL command at the ready:&lt;/p&gt;

            &lt;div class=&quot;language-clj highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vlaaad.reveal/submit-command!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:always-on-top&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vlaaad.reveal/toggle-minimized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

            &lt;h1 id=&quot;the-end&quot;&gt;The end&lt;/h1&gt;

            &lt;p&gt;Now you know how to use Reveal stickers to setup an overlay with live vortex into the JVM. You can configure it to represent the app you develop exactly as you want to see it. Give it a try and tell me what you think!&lt;/p&gt;</content>
        <author>
            <name>Vlad Proczenko</name>
            <uri>https://vlaaad.github.io/</uri>
        </author>
        <source>
            <title type="html">(:dev/notes vlaaad)</title>
            <link rel="self" href="https://vlaaad.github.io/feed.xml"/>
            <id>https://vlaaad.github.io/feed.xml</id>
        </source>
    </entry>

    <entry>
        <title type="html">Advent of Code 2021 - Puzzle 1</title>
        <link href="https://hamishrickerby.com/posts/2021-12-01-advent-of-code-2021-setup/"/>
        <id>https://hamishrickerby.com/posts/2021-12-01-advent-of-code-2021-setup/</id>
        <updated>2021-12-01T00:00:00+00:00</updated>
        <content type="html">One of the issues with getting started with a new language in a time-pressured scenario is setting up environment and tooling. Last year I used VSCode and the ReasonML plugin. It installed relatively straight-forwardly (from what I remember), and supported type hints, and autocompletion. This year I decided I'd setup Emacs, given I use it for everything else. Long story short - what an utter shambles. I tried to follow the installation guide for the Real World OCaml book plus the Prelude OCaml support (I use Prelude with Emacs, due to the great Clojure support it has). It was generally a struggle to get the extensions to handle resolving imports of local files, as well as 3rd party libraries imported via opam. I gave up and went back to VSCode. The plugin setup was straightforward, but I still struggle with being able to actually run a program. I use the utop repl(like) interface to evaluate the statements in my program files, but even that wasn't that simple. Needing to deal with merlin and dune config files just to get my files recognised feels like a bunch of unnecessary complexity. I need to resolve this (and I'd still love to get it all working in emacs), but I can limp along with what I've currently got.Puzzle 1 Step 1</content>
        <author>
            <name>Hamish Rickerby</name>
            <uri>https://hamishrickerby.com</uri>
        </author>
        <source>
            <title type="html">Hamish Rickerby</title>
            <subtitle type="html">Hamish Rickerby's blog. I write about software and technology in general.</subtitle>
            <link rel="self" href="https://hamishrickerby.com"/>
            <id>https://hamishrickerby.com</id>
        </source>
    </entry>

    <entry>
        <title type="html" xml:lang="en">Pragmatic Programmer [Book Notes]</title>
        <link href="https://dev.to/jorgetovar621/pragmatic-programmer-1ll0"/>
        <id>https://dev.to/jorgetovar621/pragmatic-programmer-1ll0</id>
        <updated>2021-11-30T20:28:57+00:00</updated>
        <content type="html">&lt;h1&gt;
            &lt;a href=&quot;https://dev.to/feed#pragmatic-programmer&quot;&gt;
            &lt;/a&gt;
            Pragmatic Programmer
            &lt;/h1&gt;

            &lt;p&gt;&lt;a href=&quot;https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X&quot;&gt;Pragmatic Programmer Book&lt;/a&gt;&lt;/p&gt;

            &lt;h2&gt;
            &lt;a href=&quot;https://dev.to/feed#pragmatic-philosophy&quot;&gt;
            &lt;/a&gt;
            Pragmatic philosophy
            &lt;/h2&gt;

            &lt;ul&gt;
            &lt;li&gt;Your life it's your life

            &lt;ul&gt;
            &lt;li&gt;Craftsmanship &lt;/li&gt;
            &lt;li&gt;Early adopter &lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;Responsibility

            &lt;ul&gt;
            &lt;li&gt;Offer options &lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;Software Entropy

            &lt;ul&gt;
            &lt;li&gt;Simplicity&lt;/li&gt;
            &lt;li&gt;Maintenance&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;Good enough software

            &lt;ul&gt;
            &lt;li&gt;Quality is a requirement&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;Your knowledge portfolio:

            &lt;ul&gt;
            &lt;li&gt;&lt;strong&gt;Investment in knowledge always pays the best interest&lt;/strong&gt;&lt;/li&gt;
            &lt;li&gt;Read nontechnical books&lt;/li&gt;
            &lt;li&gt;Read conceptual books&lt;/li&gt;
            &lt;li&gt;Learn one new language every year&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;Communicate&lt;/li&gt;
            &lt;li&gt;Testability is key&lt;/li&gt;
            &lt;/ul&gt;

            &lt;h2&gt;
            &lt;a href=&quot;https://dev.to/feed#pragmatic-approach&quot;&gt;
            &lt;/a&gt;
            Pragmatic approach
            &lt;/h2&gt;

            &lt;ul&gt;
            &lt;li&gt;The essence of good design: ETC&lt;/li&gt;
            &lt;li&gt;DRY: Code, Data, Documentation (Knowledge)

            &lt;ul&gt;
            &lt;li&gt;Don't abstract too early, wait until you have copied and pasted a couple of times, examples are needed to create good abstractions&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;Orthogonality:

            &lt;ul&gt;
            &lt;li&gt;Eliminate effects between unrelated things&lt;/li&gt;
            &lt;li&gt;Understandable, and easier to debug, test and maintain&lt;/li&gt;
            &lt;li&gt;Design patterns&lt;/li&gt;
            &lt;li&gt;SOLID&lt;/li&gt;
            &lt;li&gt;Prefer composition and FP languages&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;Reversibility:

            &lt;ul&gt;
            &lt;li&gt;Flexible architecture&lt;/li&gt;
            &lt;li&gt;Have options&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;Tracer bullets:

            &lt;ul&gt;
            &lt;li&gt;Code lean and complete&lt;/li&gt;
            &lt;li&gt;Find the target&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;

            &lt;p&gt;Prototypes and post-it notes:&lt;/p&gt;

            &lt;ul&gt;
            &lt;li&gt;Information gathering&lt;/li&gt;
            &lt;li&gt;Is coupling minimized&lt;/li&gt;
            &lt;li&gt;Collaborations between components well-defined&lt;/li&gt;
            &lt;li&gt;Responsibilities&lt;/li&gt;
            &lt;li&gt;Interfaces and data clear and available&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;

            &lt;p&gt;Domain languages:&lt;/p&gt;

            &lt;ul&gt;
            &lt;li&gt;Program close to the problem domain&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;

            &lt;p&gt;Estimation:&lt;/p&gt;

            &lt;ul&gt;
            &lt;li&gt; I'll back to you&lt;/li&gt;
            &lt;li&gt;optimistic, most likely and pessimistic&lt;/li&gt;
            &lt;li&gt;model building: someone that already did it &lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;/ul&gt;

            &lt;h2&gt;
            &lt;a href=&quot;https://dev.to/feed#basic-tools&quot;&gt;
            &lt;/a&gt;
            Basic Tools
            &lt;/h2&gt;

            &lt;p&gt;Be more productive with your tools&lt;/p&gt;

            &lt;ul&gt;
            &lt;li&gt;The power of plain text:

            &lt;ul&gt;
            &lt;li&gt;Self describing data&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;Shell games &lt;/li&gt;
            &lt;li&gt;Power Editing &lt;/li&gt;
            &lt;li&gt;Debugging skills

            &lt;ul&gt;
            &lt;li&gt;localhost test&lt;/li&gt;
            &lt;li&gt;Explain to someone else&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;Text manipulation

            &lt;ul&gt;
            &lt;li&gt;Unix: sed, awk &lt;/li&gt;
            &lt;li&gt;Scripting languages: Python&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt; Engineering daybooks&lt;/li&gt;
            &lt;/ul&gt;

            &lt;h2&gt;
            &lt;a href=&quot;https://dev.to/feed#pragmatic-paranoia&quot;&gt;
            &lt;/a&gt;
            Pragmatic Paranoia
            &lt;/h2&gt;

            &lt;p&gt;Validate all the information we're given, assertions of bad data, and distrust data from potential attackers&lt;/p&gt;

            &lt;ul&gt;
            &lt;li&gt;Design by contract

            &lt;ul&gt;
            &lt;li&gt;Preconditions, postconditions: Clojure Specs&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;Dead programs tell no lies

            &lt;ul&gt;
            &lt;li&gt;Crash early&lt;/li&gt;
            &lt;li&gt;Defensive programming is a waste of time let it crash! (Supervisor)&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;Assertive programming

            &lt;ul&gt;
            &lt;li&gt;Use assertions to prevent the impossible &lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;How to balance resources

            &lt;ul&gt;
            &lt;li&gt;Release free resources&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;Don't outrun your headlights

            &lt;ul&gt;
            &lt;li&gt;take small steps always&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;/ul&gt;

            &lt;h2&gt;
            &lt;a href=&quot;https://dev.to/feed#bend-or-break&quot;&gt;
            &lt;/a&gt;
            Bend or break
            &lt;/h2&gt;

            &lt;p&gt;Make our code as flexible as possible, a good way to stay flexible it's to write less code&lt;/p&gt;

            &lt;ul&gt;
            &lt;li&gt;Decoupling

            &lt;ul&gt;
            &lt;li&gt;Allow flexibility&lt;/li&gt;
            &lt;li&gt;Shy code that promotes cohesion&lt;/li&gt;
            &lt;li&gt;Law of Demeter: Depend on abstractions&lt;/li&gt;
            &lt;li&gt;Avoid global data&lt;/li&gt;
            &lt;li&gt;Avoid inheritance&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;Juggling the real world

            &lt;ul&gt;
            &lt;li&gt;Events&lt;/li&gt;
            &lt;li&gt;Finite state machine&lt;/li&gt;
            &lt;li&gt;Observer&lt;/li&gt;
            &lt;li&gt;Publish/Subscribe (Channels)&lt;/li&gt;
            &lt;li&gt;Reactive Streams&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;Transforming programming

            &lt;ul&gt;
            &lt;li&gt;Think in programs like Input Output and transformation of data&lt;/li&gt;
            &lt;li&gt;Process of data&lt;/li&gt;
            &lt;li&gt;find . -name '*.java' | xargs wc -l | sort -n | tail -11 | head -10&lt;/li&gt;
            &lt;li&gt;Programming is about code but programs are about data&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;Inheritance tax

            &lt;ul&gt;
            &lt;li&gt;Coupling&lt;/li&gt;
            &lt;li&gt;Interfaces to express polymorphism&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;Configuration

            &lt;ul&gt;
            &lt;li&gt;Parameterize your app using external configuration&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;/ul&gt;

            &lt;h2&gt;
            &lt;a href=&quot;https://dev.to/feed#concurrency&quot;&gt;
            &lt;/a&gt;
            Concurrency
            &lt;/h2&gt;

            &lt;ul&gt;
            &lt;li&gt;Concurrency: Two pieces of code run at the same time using Fibers, Threads, and process&lt;/li&gt;
            &lt;li&gt;Parallelism: Hardware that can do two things at once&lt;/li&gt;
            &lt;li&gt;Breaking temporal coupling&lt;/li&gt;
            &lt;li&gt;Avoid shared state&lt;/li&gt;
            &lt;li&gt;Actor and process&lt;/li&gt;
            &lt;li&gt;Blackboards

            &lt;ul&gt;
            &lt;li&gt;Communication using Kafka or other streaming services&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;/ul&gt;

            &lt;h2&gt;
            &lt;a href=&quot;https://dev.to/feed#while-you-are-coding&quot;&gt;
            &lt;/a&gt;
            While you are coding
            &lt;/h2&gt;

            &lt;ul&gt;
            &lt;li&gt;Listen to your lizard brain

            &lt;ul&gt;
            &lt;li&gt;Give time and space to your brains to organize your ideas&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;Algorithm speed&lt;/li&gt;
            &lt;li&gt;Refactoring

            &lt;ul&gt;
            &lt;li&gt;Rethink&lt;/li&gt;
            &lt;li&gt;Gardening&lt;/li&gt;
            &lt;li&gt;Unit test&lt;/li&gt;
            &lt;li&gt;(Duplication, Not DRY, Bad performance, Outdated knowledge, Test passing. Nonorthogonal)&lt;/li&gt;
            &lt;li&gt;Redesign&lt;/li&gt;
            &lt;li&gt;Refactor early and often is like a surgery&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;Test the code

            &lt;ul&gt;
            &lt;li&gt;Feedback&lt;/li&gt;
            &lt;li&gt;Improve design&lt;/li&gt;
            &lt;li&gt;Embrace TDD&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;Property-based testing&lt;/li&gt;
            &lt;li&gt;Security

            &lt;ul&gt;
            &lt;li&gt;Authentication &lt;/li&gt;
            &lt;li&gt;I/O data&lt;/li&gt;
            &lt;li&gt;Principle of least privilege&lt;/li&gt;
            &lt;li&gt;Up to date&lt;/li&gt;
            &lt;li&gt;Encrypt sensitive information&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;Naming

            &lt;ul&gt;
            &lt;li&gt;&lt;strong&gt;At programming all the things have names and reveal the intent and belief of the system&lt;/strong&gt;&lt;/li&gt;
            &lt;li&gt;Communication&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;/ul&gt;

            &lt;h2&gt;
            &lt;a href=&quot;https://dev.to/feed#%C2%A0before-the-project&quot;&gt;
            &lt;/a&gt;
            Before the project
            &lt;/h2&gt;

            &lt;ul&gt;
            &lt;li&gt;Requirements Pit

            &lt;ul&gt;
            &lt;li&gt;User doesn't know what he wants&lt;/li&gt;
            &lt;li&gt;Our job is to help businesses to understand what they want&lt;/li&gt;
            &lt;li&gt;Improve the feedback loop&lt;/li&gt;
            &lt;li&gt;BDUF is not a good thing&lt;/li&gt;
            &lt;li&gt;Work with the user to think like one&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;Solving de puzzle

            &lt;ul&gt;
            &lt;li&gt;Think out of the box&lt;/li&gt;
            &lt;li&gt;Make time to think in the unfocused mode&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;Working together

            &lt;ul&gt;
            &lt;li&gt;Pair programming&lt;/li&gt;
            &lt;li&gt;Mob programming&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;Agile

            &lt;ul&gt;
            &lt;li&gt;It's about values, context, and feedback loop&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;/ul&gt;

            &lt;h2&gt;
            &lt;a href=&quot;https://dev.to/feed#pragmatic-teams&quot;&gt;
            &lt;/a&gt;
            Pragmatic Teams
            &lt;/h2&gt;

            &lt;ul&gt;
            &lt;li&gt;Pragmatic Teams

            &lt;ul&gt;
            &lt;li&gt;No broken windows&lt;/li&gt;
            &lt;li&gt;Be aware of the environment and health of the project&lt;/li&gt;
            &lt;li&gt;DRY &lt;/li&gt;
            &lt;li&gt;Small teams&lt;/li&gt;
            &lt;li&gt;Cross-functional teams &lt;strong&gt;Tracer bullets&lt;/strong&gt;
            &lt;/li&gt;
            &lt;li&gt;Automation&lt;/li&gt;
            &lt;li&gt;Create and identity (Team name)&lt;/li&gt;
            &lt;li&gt;Schedule time to improve knowledge portfolio&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;Context

            &lt;ul&gt;
            &lt;li&gt;Use the right tools and practices&lt;/li&gt;
            &lt;li&gt;Software delivery (When release flow is slow status meetings are high)&lt;/li&gt;
            &lt;li&gt;Kanban&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;The programmer starter kit

            &lt;ul&gt;
            &lt;li&gt;Version control&lt;/li&gt;
            &lt;li&gt;Ruthless testing

            &lt;ul&gt;
            &lt;li&gt;Unit, Integration, Component, Performance&lt;/li&gt;
            &lt;li&gt;If modules don't work well as a unit, they won't work well as a system&lt;/li&gt;
            &lt;li&gt;Saboteurs: Chaos engineering&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;Automate everything

            &lt;ul&gt;
            &lt;li&gt;Software delivery es fully automated&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;Delight your users

            &lt;ul&gt;
            &lt;li&gt;What are your expectations&lt;/li&gt;
            &lt;li&gt;Deliver quality not code&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;li&gt;Pride and prejudice

            &lt;ul&gt;
            &lt;li&gt;Code that you feel proud&lt;/li&gt;
            &lt;li&gt;Collective ownership&lt;/li&gt;
            &lt;/ul&gt;


            &lt;/li&gt;
            &lt;/ul&gt;</content>
        <author>
            <name>Jorge Tovar</name>
            <uri>https://dev.to</uri>
        </author>
        <source>
            <title type="html">DEV Community</title>
            <subtitle type="html">A constructive and inclusive social network for software developers. With you every step of your journey.</subtitle>
            <link rel="self" href="https://dev.to/feed"/>
            <id>https://dev.to</id>
        </source>
    </entry>

    <entry>
        <title type="html">What the Reagent Component?!</title>
        <link href="https://betweentwoparens.com/blog/what-the-reagent-component/"/>
        <id>https://betweentwoparens.com/blog/what-the-reagent-component/</id>
        <updated>2021-11-30T00:15:52+00:00</updated>
        <content type="html">&lt;p&gt;Did you know that when you write a &lt;a href=&quot;https://github.com/reagent-project/reagent/blob/master/doc/CreatingReagentComponents.md#form-1-a-simple-function&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;form-1&lt;/a&gt;, &lt;a href=&quot;https://github.com/reagent-project/reagent/blob/master/doc/CreatingReagentComponents.md#form-2--a-function-returning-a-function&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;form-2&lt;/a&gt; or &lt;a href=&quot;https://github.com/reagent-project/reagent/blob/master/doc/CreatingReagentComponents.md#form-3-a-class-with-life-cycle-methods&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;form-3&lt;/a&gt; Reagent component they all default&lt;a href=&quot;https://betweentwoparens.com/blog/what-the-reagent-component/#reagent-default-class&quot; id=&quot;reagent-default-class-ref&quot;&gt;&lt;/a&gt; to becoming React &lt;code&gt;class components&lt;/code&gt;&lt;a href=&quot;https://betweentwoparens.com/blog/what-the-reagent-component/#reagent-components&quot; id=&quot;reagent-components-ref&quot;&gt;?&lt;/a&gt;&lt;/p&gt;
            &lt;p&gt;For example, if you were to write this &lt;code&gt;form-1&lt;/code&gt; Reagent component:&lt;/p&gt;
            &lt;div class=&quot;bride-highlight&quot;&gt; &lt;pre class=&quot;bride-code-clojure&quot;&gt;&lt;code class=&quot;bride-code-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;defn&lt;/span&gt; welcome &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:h1&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello, friend&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
            &lt;p&gt;By the time Reagent passes it to React it would be the equivalent of you writing this:&lt;/p&gt;
            &lt;div class=&quot;bride-highlight&quot;&gt; &lt;pre class=&quot;bride-code-javascript&quot;&gt;&lt;code class=&quot;bride-code-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Welcome&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;Hello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; friend&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
            &lt;aside class=&quot;blog-content__note&quot;&gt;&lt;p&gt;To be clear, Reagent components do not turn into &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;ES6 class syntax&lt;/a&gt;.  This is just an illustrative tool because ES6 classes are rapidly becoming more common than the alternative forms of writing classes that we shall see later in this post.&lt;/p&gt;
            &lt;/aside&gt;&lt;p&gt;Okay, so, Reagent components become React &lt;code&gt;Class Components&lt;/code&gt;. Why do we care? This depth of understanding is valuable because it means we can better understand:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt;JavaScript, ES6 classes and the idea behind &quot;syntax sugar&quot;&lt;/li&gt;
            &lt;li&gt;React's strategy for &lt;a href=&quot;https://overreacted.io/how-does-react-tell-a-class-from-a-function/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;distinguishing class and function components&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;How ClojureScript interacts with JavaScript&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;The result of all of this &quot;fundamental&quot; learning is we can more effectively harness JavaScript from within ClojureScript.&lt;/p&gt;
            &lt;aside class=&quot;blog-content__note&quot;&gt;&lt;p&gt;I assume readers have a level of familiarity with ClojureScript, JavaScript and React. Please also note that understanding Reagent at this level is not required to be productive in Reagent.  Finally, as of &lt;a href=&quot;https://github.com/reagent-project/reagent/blob/master/CHANGELOG.md#100-alpha2-2020-05-13&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Reagent 1.0.0&lt;/a&gt; Reagent is capable of allowing developers to choose whether they want their components to be &lt;code&gt;class&lt;/code&gt; or &lt;code&gt;function&lt;/code&gt; components.  When this post was originally written, this was not possible and for many in the community it was an assumption that might have gone unnoticed.  None the less, the learnings here are still important!  So, the rest of this post is assuming that you have NOT enabled Reagent components to render as &lt;code&gt;function&lt;/code&gt; components.&lt;/p&gt;
            &lt;/aside&gt;&lt;h2 id=&quot;a-pseudoclassical-pattern&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://betweentwoparens.com/blog/what-the-reagent-component/#a-pseudoclassical-pattern&quot;&gt;A Pseudoclassical Pattern&lt;/a&gt;&lt;/h2&gt;
            &lt;p&gt;The reason all of your Reagent components become &lt;code&gt;class components&lt;/code&gt; is because all of the code you pass to Reagent is run through an internal Reagent function called &lt;a href=&quot;https://github.com/reagent-project/reagent/blob/88e9833be9c3135548d760286ffd84d88a0a0489/src/reagent/impl/component.cljs#L289&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;create-class&lt;/a&gt;.  The interesting part of this is &lt;em&gt;how&lt;/em&gt; &lt;code&gt;create-class&lt;/code&gt; uses JavaScript mechanics to transform the Reagent component you wrote into something that is recognized as a React class component.  Before we look into what &lt;code&gt;create-class&lt;/code&gt; is doing, it's helpful to review how &quot;classes&quot; work in JavaScript.&lt;/p&gt;
            &lt;p&gt;Prior to ES6, JavaScript did not have classes&lt;a href=&quot;https://betweentwoparens.com/blog/what-the-reagent-component/#javascript-es6-classes&quot; id=&quot;javascript-es6-classes-ref&quot;&gt;.&lt;/a&gt;  and this made &lt;em&gt;some&lt;/em&gt; JS developers sad because classes are a common pattern used to structure ones code and provide mechanisms for:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt;instantiation&lt;/li&gt;
            &lt;li&gt;inheritance&lt;/li&gt;
            &lt;li&gt;polymorphism&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;But as I said, prior to ES6, JavaScript did not have a formal syntax for &quot;classes&quot;.  This led the JavaScript community to develop a &lt;a href=&quot;http://nick.balestra.ch/2015/classes-and-instantiation-patterns-in-javascript/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;series of instantiation patterns&lt;/a&gt; to help &lt;em&gt;simulate&lt;/em&gt; classes.&lt;/p&gt;
            &lt;p&gt;Of all of these patterns, the &lt;code&gt;pseudoclassical instantiation pattern&lt;/code&gt; became one of the most popular ways to simulate a class in JavaScript.  This is evidenced by the fact that many of the &quot;first generation&quot; JavaScript libraries and frameworks, like &lt;a href=&quot;https://developers.google.com/closure/library/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;google closure library&lt;/a&gt; and &lt;a href=&quot;https://backbonejs.org/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;backbone&lt;/a&gt;, are written in this style.&lt;/p&gt;
            &lt;p&gt;The reason we are going over this history is because the thing about a programming language is there are &quot;patterns&quot; and &quot;syntax&quot;.  The challenge with &quot;patterns&quot; is:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt;They are disseminated culturally&lt;/li&gt;
            &lt;li&gt;They are &lt;em&gt;often&lt;/em&gt; not easy to search&lt;/li&gt;
            &lt;li&gt;They &lt;em&gt;often&lt;/em&gt; require a deeper understanding of the language and problem being solved to understand why the pattern became accepted.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;The last point is relevant to our conversation because patterns ultimatley make assumptions. Assumptions like our understanding of the problem being solved and where and when a pattern should itself be used.  The end result is that a pattern can just become a &quot;thing&quot; we do all while forgetting why we started to do it in the first place or what the world could look like without it.&lt;/p&gt;
            &lt;p&gt;For example, the most common way of writing a React class component is to use ES6 class syntax.  But did you know that ES6 class syntax is little more than syntactic sugar around the &lt;code&gt;pseudoclassical instantiation pattern&lt;/code&gt;?&lt;/p&gt;
            &lt;p&gt;For example, you can write a valid React class component using the &lt;code&gt;pseudoclassical instantiation pattern&lt;/code&gt; like this:&lt;/p&gt;
            &lt;div class=&quot;bride-highlight&quot;&gt; &lt;pre class=&quot;bride-code-javascript&quot;&gt;&lt;code class=&quot;bride-code-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 1. define a function (component) called `Welcome`&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Welcome&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; updater&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; updater&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;token comment&quot;&gt;// 2. connect `Welcome` to the `React.Component` prototype&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;Welcome&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;token comment&quot;&gt;// 3. re-define the `constructor`&lt;/span&gt;
            Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Welcome&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'constructor'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            enumerable&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            writable&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            configurable&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            value&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Welcome&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;token comment&quot;&gt;// 4. define your React components `render` method&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;Welcome&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;Hello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Reagent&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
            &lt;p&gt;While the above is a valid React &lt;code&gt;Class Component&lt;/code&gt;, it's also verbose and error prone.  For these reasons JavaScript introduced ES6 classes to the language:&lt;/p&gt;
            &lt;div class=&quot;bride-highlight&quot;&gt; &lt;pre class=&quot;bride-code-javascript&quot;&gt;&lt;code class=&quot;bride-code-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Welcome&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;Hello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Reagent&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
            &lt;aside class=&quot;blog-content__note&quot;&gt;&lt;p&gt;Yup, ES6 class syntax is a sexier &lt;code&gt;pseudoclassical instantiation pattern&lt;/code&gt; and also a good example of what developers mean when they say &lt;code&gt;syntactic sugar&lt;/code&gt;.  I should also mention that there are &lt;em&gt;some&lt;/em&gt; differences between the two approaches listed above which means they are not 100% equivalent, but for most developers the differences are academic.  &lt;strong&gt;Fun time bonus:&lt;/strong&gt; I encourage you checkout &lt;a href=&quot;https://codesandbox.io/s/pseudoclassical-instantiation-pattern-sc0fk&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;this code sandbox&lt;/a&gt; where I have setup live examples of both.&lt;/p&gt;
            &lt;/aside&gt;&lt;p&gt;For those looking for further evidence, we can support our claim that &lt;code&gt;ES6 Classes&lt;/code&gt; result in same thing as what the &lt;code&gt;pseudoclassical instantiation pattern&lt;/code&gt; produces by using JavaScript's built-in introspection tools to compare the &lt;code&gt;pseudoclassical instantiation pattern&lt;/code&gt; to the &lt;code&gt;ES6 class&lt;/code&gt; syntax.&lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;pseudoclassical instantiation pattern&lt;/strong&gt;:&lt;/p&gt;
            &lt;div class=&quot;bride-highlight&quot;&gt; &lt;pre class=&quot;bride-code-javascript&quot;&gt;&lt;code class=&quot;bride-code-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Welcome&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; updater&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; updater&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;token comment&quot;&gt;// ...repeat steps 2 - 4 from above before completing the rest&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; welcome &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Welcome&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;token class-name&quot;&gt;Welcome&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// =&amp;gt; true&lt;/span&gt;

            Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Welcome&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype
            &lt;span class=&quot;token comment&quot;&gt;// =&amp;gt; true&lt;/span&gt;

            welcome &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// =&amp;gt; true&lt;/span&gt;

            welcome &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Welcome&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// =&amp;gt; true&lt;/span&gt;

            Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;welcome&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Welcome&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype
            &lt;span class=&quot;token comment&quot;&gt;// =&amp;gt; true&lt;/span&gt;

            React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;welcome&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// =&amp;gt; true&lt;/span&gt;

            &lt;span class=&quot;token class-name&quot;&gt;Welcome&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;welcome&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// =&amp;gt; true&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
            &lt;p&gt;&lt;strong&gt;ES6 class&lt;/strong&gt;&lt;/p&gt;
            &lt;div class=&quot;bride-highlight&quot;&gt; &lt;pre class=&quot;bride-code-javascript&quot;&gt;&lt;code class=&quot;bride-code-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Welcome&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'ES6 Inheritance'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; welcome &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Welcome&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;token class-name&quot;&gt;Welcome&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// =&amp;gt; true&lt;/span&gt;

            Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Welcome&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype
            &lt;span class=&quot;token comment&quot;&gt;// =&amp;gt; true&lt;/span&gt;

            welcome &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// =&amp;gt; true&lt;/span&gt;

            welcome &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Welcome&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// =&amp;gt; true&lt;/span&gt;

            Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;welcome&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Welcome&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype
            &lt;span class=&quot;token comment&quot;&gt;// =&amp;gt; true&lt;/span&gt;

            React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;welcome&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// =&amp;gt; true&lt;/span&gt;

            &lt;span class=&quot;token class-name&quot;&gt;Welcome&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;welcome&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// =&amp;gt; true&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
            &lt;p&gt;What does all of this mean?  As far as JavaScript and React are concerned, both definions of the &lt;code&gt;Welcome&lt;/code&gt; component are valid React &lt;code&gt;Class Components&lt;/code&gt;.&lt;/p&gt;
            &lt;p&gt;With this in mind, lets look at Reagent's &lt;code&gt;create-class&lt;/code&gt; function and see what it does.&lt;/p&gt;
            &lt;h2 id=&quot;what-reagent-does&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://betweentwoparens.com/blog/what-the-reagent-component/#what-reagent-does&quot;&gt;What Reagent Does&lt;/a&gt;&lt;/h2&gt;
            &lt;p&gt;The history lesson from the above section is important because &lt;code&gt;create-class&lt;/code&gt; uses a modified version of the &lt;code&gt;pseudoclassical instantiation pattern&lt;/code&gt;.  Let's take a look at what we mean.&lt;/p&gt;
            &lt;p&gt;The following code sample is a simplified version of Reagent's &lt;code&gt;create-class&lt;/code&gt; function:&lt;/p&gt;
            &lt;div class=&quot;bride-highlight&quot;&gt; &lt;pre class=&quot;bride-code-javascript&quot;&gt;&lt;code class=&quot;bride-code-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; updater&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; updater&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

            goog&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cmp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; classMethods&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

            goog&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cmp&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; staticMethods&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

            cmp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;constructor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cmp
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
            &lt;aside class=&quot;blog-content__note&quot;&gt;&lt;p&gt;Note that the above is written in JavaScript where as Reagent's is written in ClojureScript. The reason I have done this is that I feel it can reach a broader audience when written in JS, but most importantly, the reader doesn't have to transform the code in their header from CLJS to JS which allows us to examine the work with less mental overhead.&lt;/p&gt;
            &lt;/aside&gt;&lt;p&gt;What we have above is Reagents take on the &lt;code&gt;pseudoclassical instantiation pattern&lt;/code&gt; with a few minor tweaks:&lt;/p&gt;
            &lt;div class=&quot;bride-highlight&quot;&gt; &lt;pre class=&quot;bride-code-javascript&quot;&gt;&lt;code class=&quot;bride-code-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 1. we copy to properties + methods of React.Component&lt;/span&gt;
            goog&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cmp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; classMethods&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

            goog&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cmp&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; staticMethods&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;token comment&quot;&gt;// 2. the constructor is not as &quot;thorough&quot;&lt;/span&gt;
            cmp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;constructor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cmp
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
            &lt;p&gt;Exploring point 1 we see that Reagent has opted to copy the &lt;code&gt;properties&lt;/code&gt; and &lt;code&gt;methods&lt;/code&gt; of &lt;code&gt;React.Component&lt;/code&gt; directly to the Reagent compnents we write.  That is what's happening here:&lt;/p&gt;
            &lt;div class=&quot;bride-highlight&quot;&gt; &lt;pre class=&quot;bride-code-javascript&quot;&gt;&lt;code class=&quot;bride-code-javascript&quot;&gt;goog&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cmp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; classMethods&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
            &lt;p&gt;If we were using the the traditional &lt;code&gt;pseudoclassical&lt;/code&gt; approach we would instead do this:&lt;/p&gt;
            &lt;div class=&quot;bride-highlight&quot;&gt; &lt;pre class=&quot;bride-code-javascript&quot;&gt;&lt;code class=&quot;bride-code-javascript&quot;&gt;cmp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
            &lt;p&gt;Thus, the difference is that Reagent's approach copies all the methods and properties from &lt;code&gt;React.Component&lt;/code&gt; to the &lt;code&gt;cmp&lt;/code&gt; prototype where as the second approach is going to &lt;code&gt;link&lt;/code&gt; the &lt;code&gt;cmp&lt;/code&gt; prototype to &lt;code&gt;React.component&lt;/code&gt; prototype.  The benefit of linking is that each time you instantiate a &lt;code&gt;Welcome&lt;/code&gt; component, the &lt;code&gt;Welcome&lt;/code&gt; component does not need to re-create all of the &lt;code&gt;React.components&lt;/code&gt; methods and properties.&lt;/p&gt;
            &lt;p&gt;Exploring the second point, Reagent is doing this:&lt;/p&gt;
            &lt;div class=&quot;bride-highlight&quot;&gt; &lt;pre class=&quot;bride-code-javascript&quot;&gt;&lt;code class=&quot;bride-code-javascript&quot;&gt;cmp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;constructor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cmp
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
            &lt;p&gt;whereas with the traditional &lt;code&gt;pseudoclassical&lt;/code&gt; approach we would instead do this:&lt;/p&gt;
            &lt;div class=&quot;bride-highlight&quot;&gt; &lt;pre class=&quot;bride-code-javascript&quot;&gt;&lt;code class=&quot;bride-code-javascript&quot;&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Welcome&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'constructor'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            enumerable&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            writable&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            configurable&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            value&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Welcome&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
            &lt;p&gt;The difference in the above approaches is that if we just use &lt;code&gt;=&lt;/code&gt; as we are doing in the Reagent version we create an &lt;code&gt;enumerable&lt;/code&gt; constructor.  This can have an implication depending on who consumes our classes, but in our case we know that only React is going to be consuming our class components, so we can do this with relative confidence.&lt;/p&gt;
            &lt;p&gt;What is one of the more interesting results of the above two Reagent modifications?  First, if React depended on JavaScript introspection to tell whether or not a component is a child of &lt;code&gt;React.Component&lt;/code&gt; we would not be happy campers:&lt;/p&gt;
            &lt;div class=&quot;bride-highlight&quot;&gt; &lt;pre class=&quot;bride-code-javascript&quot;&gt;&lt;code class=&quot;bride-code-javascript&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Welcome&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// =&amp;gt; false...Welcome is not a child of React.Component&lt;/span&gt;

            Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Welcome&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Component&llt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype
            &lt;span class=&quot;token comment&quot;&gt;// =&amp;gt; false...React.component is not part of Welcomes prototype chain&lt;/span&gt;

            welcome &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// =&amp;gt; false...Welcome is not an instance of React.Component&lt;/span&gt;

            welcome &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Welcome&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// =&amp;gt; true...welcome is a child of Welcome&lt;/span&gt;

            Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;welcome&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Welcome&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype
            &lt;span class=&quot;token comment&quot;&gt;// =&amp;gt; true...welcome is linked to Welcome prototype&lt;/span&gt;

            console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;welcome&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// =&amp;gt; false...React.Component not linked to the prototype of React.Component&lt;/span&gt;

            console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Welcome&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;welcome&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// is Welcome is the ancestory?&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
            &lt;p&gt;What the above shows is that &lt;code&gt;Welcome&lt;/code&gt; is not a child of &lt;code&gt;React.component&lt;/code&gt; even though it has all the properties and methods that &lt;code&gt;React.Component&lt;/code&gt; has.  This is why were lucky that React is smart about detecting &lt;a href=&quot;https://overreacted.io/how-does-react-tell-a-class-from-a-function/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;class vs. function components&lt;/a&gt;.&lt;/p&gt;
            &lt;p&gt;Second, by &lt;code&gt;copying&lt;/code&gt; rather than &lt;code&gt;linking&lt;/code&gt; prototypes we could inccur a performance cost but again, in our case this cost is negligible.&lt;/p&gt;
            &lt;aside class=&quot;blog-content__note&quot;&gt;&lt;p&gt;For those who want to know why the Reagent team chose to modify the pseudoclassical instantiation pattern I do not really have an answer.  At the end of the day, they do more or less the same things without any significant downsides&lt;a href=&quot;https://betweentwoparens.com/blog/what-the-reagent-component/#why-modify&quot; id=&quot;why-modify-ref&quot;&gt;?&lt;/a&gt;&lt;/p&gt;
            &lt;/aside&gt;&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://betweentwoparens.com/blog/what-the-reagent-component/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
            &lt;p&gt;I think it's important to dive into the weeds.  In my experience, it's these detours and thorough questioning of topics which has led to considerable improvements in my programming skill and general comfort with increasingly challenging topics.&lt;/p&gt;
            &lt;p&gt;However, I think the biggest thing for me is something I referenced a few times in this post: &quot;cultural knowledge&quot;.  I have come to see that that is the most powerful tools we have as a species.  It's unfortunate that this kind of information is not always available and my hope is that I could fill some of the gaps with this writing and maybe even open the door to works which can be built ontop of this.&lt;/p&gt;
            &lt;p&gt;Less philosophically though, I find it encouraging to know that everything is, generally speaking, JavaScript under the hood.  This is important because it allows us to take advantage of what has come before and really dig into interesting ways we can use and manipulate JS from within CLJS.&lt;/p&gt;
            &lt;aside class=&quot;footnote-container&quot;&gt;&lt;h3&gt;Footnotes&lt;/h3&gt;&lt;ol&gt;&lt;li id=&quot;reagent-default-class&quot;&gt;&lt;p&gt;I say &quot;default&quot; because prior to version xx of Reagent you did not have a choice between class or function components.&lt;/p&gt;
            &lt;a href=&quot;https://betweentwoparens.com/blog/what-the-reagent-component/#reagent-default-class-ref&quot;&gt;Back&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;reagent-components&quot;&gt;&lt;p&gt;This is &lt;a href=&quot;https://github.com/reagent-project/reagent/blob/master/doc/CreatingReagentComponents.md#final-note&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;briefly touched on&lt;/a&gt; in Reagents component guide but they do not explicitly use the words &lt;code&gt;React class component&lt;/code&gt; which means that it is easy to miss the implication of this point. Hence this blog post.&lt;/p&gt;
            &lt;a href=&quot;https://betweentwoparens.com/blog/what-the-reagent-component/#reagent-components-ref&quot;&gt;Back&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;javascript-es6-classes&quot;&gt;&lt;p&gt;It is important to note that even with ES6 class syntax JavaScript still does not have classes in the traditional sense.&lt;/p&gt;
            &lt;a href=&quot;https://betweentwoparens.com/blog/what-the-reagent-component/#javascript-es6-classes-ref&quot;&gt;Back&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;why-modify&quot;&gt;&lt;p&gt;If your curious as to why there is an &lt;a href=&quot;https://github.com/reagent-project/reagent/pull/437#issuecomment-520943315&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;official response&lt;/a&gt; from the current maintainer of the Reagent to this post from the current maintainer of the Reagent to this post.&lt;/p&gt;
            &lt;a href=&quot;https://betweentwoparens.com/blog/what-the-reagent-component/#why-modify-ref&quot;&gt;Back&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/aside&gt;</content>
        <author>
            <name>Thomas Mattacchione</name>
            <uri>https://betweentwoparens.com</uri>
        </author>
        <source>
            <title type="html">Between Two Parens</title>
            <subtitle type="html">A blog about life between two parens.</subtitle>
            <link rel="self" href="https://betweentwoparens.com/feed.xml"/>
            <id>https://betweentwoparens.com</id>
        </source>
    </entry>

    <entry>
        <title type="html">What are the Clojure Tools?</title>
        <link href="https://betweentwoparens.com/blog/what-are-the-clojure-tools/"/>
        <id>https://betweentwoparens.com/blog/what-are-the-clojure-tools/</id>
        <updated>2021-11-30T00:15:52+00:00</updated>
        <content type="html">&lt;p&gt;This post is about &quot;getting&quot; the &lt;code&gt;Clojure Tools&lt;/code&gt;.  The reason?  They stumped me
            in the beginning and I felt like if I can make someone's journey just a &lt;em&gt;bit&lt;/em&gt;
            easier that might be a good thing.&lt;/p&gt;
            &lt;p&gt;My Clojure learning journey started by asking questions like:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt;How do I &lt;strong&gt;install&lt;/strong&gt; Clojure?&lt;/li&gt;
            &lt;li&gt;How do I &lt;strong&gt;run&lt;/strong&gt; a Clojure program?&lt;/li&gt;
            &lt;li&gt;How do I &lt;strong&gt;manage&lt;/strong&gt; Clojure packages (dependencies)?&lt;/li&gt;
            &lt;li&gt;How do I &lt;strong&gt;configure&lt;/strong&gt; a Clojure project?&lt;/li&gt;
            &lt;li&gt;How do I &lt;strong&gt;build&lt;/strong&gt; Clojure for production?&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Now, when I started working with Clojure the answer to these questions was:
            choose either &lt;a href=&quot;https://leiningen.org/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;lein&lt;/a&gt; or &lt;a href=&quot;https://boot-clj.com/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;boot&lt;/a&gt;.  Then Rich Hickey and his ride or die homeboys
            rolled by and provided their own answer: The &lt;code&gt;Clojure Tools&lt;/code&gt;
            &lt;a href=&quot;https://betweentwoparens.com/blog/what-are-the-clojure-tools/#cli-tool-v-dev-tools&quot; id=&quot;cli-tool-v-dev-tools-ref&quot;&gt;.&lt;/a&gt;&lt;/p&gt;
            &lt;p&gt;Their vision, like the vision of Clojure itself, is a bit offbeat.  So, this post
            is about reviewing the &lt;code&gt;Clojure Tools&lt;/code&gt; and figuring out a mental model for them.&lt;/p&gt;
            &lt;p&gt;At a high level, the &lt;code&gt;Clojure Tools&lt;/code&gt; currently consist of:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt;&lt;code&gt;Clojure CLI&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;&lt;code&gt;tools.build&lt;/code&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;The first is a CLI tool and the second is a Clojure library which provides
            some helper functions to make it easier to build Clojure artifacts.  The rest of
            this post will dig into each of these tools.&lt;/p&gt;
            &lt;aside class=&quot;blog-content__note&quot;&gt;&lt;p&gt;Want to install the &lt;code&gt;Clojure CLI&lt;/code&gt;? Visit the &lt;a href=&quot;https://clojure.org/guides/getting_started&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Official Getting Started Guide&lt;/a&gt; or
            watch &lt;a href=&quot;https://www.youtube.com/watch?v=5_q5pLoz9b0&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Installing Clojure on Mac&lt;/a&gt;.  Sorry Linux and Windows, friends.  I will
            get to those videos in time!&lt;/p&gt;
            &lt;/aside&gt;&lt;h2 id=&quot;clojure-cli&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://betweentwoparens.com/blog/what-are-the-clojure-tools/#clojure-cli&quot;&gt;Clojure CLI&lt;/a&gt;&lt;/h2&gt;
            &lt;p&gt;The &lt;code&gt;Clojure CLI&lt;/code&gt; is made up of the following subprograms:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/clojure/brew-install&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;clj/clojure&lt;/a&gt; - a bash script&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://github.com/clojure/tools.deps.alpha&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;tools.deps.alpha&lt;/a&gt; a clojure library (commonly referred to as &lt;code&gt;deps&lt;/code&gt;)&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://www.clojure.org/guides/deps_and_cli&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;deps.edn&lt;/a&gt; - an &lt;a href=&quot;https://github.com/edn-format/edn&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;edn&lt;/a&gt; file with a specific structure&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;And here is what it looks like to use the &lt;code&gt;Clojure CLI&lt;/code&gt; and some of the things
            it can do:&lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Run&lt;/strong&gt; a Clojure repl&lt;/p&gt;
            &lt;div class=&quot;bride-highlight&quot;&gt; &lt;pre class=&quot;bride-code-bash&quot;&gt;&lt;code class=&quot;bride-code-bash&quot;&gt;clj
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
            &lt;p&gt;&lt;strong&gt;Run&lt;/strong&gt; a Clojure program&lt;/p&gt;
            &lt;div class=&quot;bride-highlight&quot;&gt; &lt;pre class=&quot;bride-code-bash&quot;&gt;&lt;code class=&quot;bride-code-bash&quot;&gt;clj -M -m your-clojure-program
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
            &lt;p&gt;&lt;strong&gt;manage&lt;/strong&gt; Clojure dependencies&lt;/p&gt;
            &lt;div class=&quot;bride-highlight&quot;&gt; &lt;pre class=&quot;bride-code-bash&quot;&gt;&lt;code class=&quot;bride-code-bash&quot;&gt;clj -Sdeps &lt;span class=&quot;token string&quot;&gt;'{:deps {bidi/bidi {:mvn/version &quot;2.1.6&quot;}}}'&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
            &lt;p&gt;The above is just the tip of the &lt;code&gt;CLojure CLI&lt;/code&gt; iceburg.  I have omitted more
            interesting examples so we can focus on the &lt;code&gt;Clojure CLI&lt;/code&gt; at a higher level. In
            honor of said &quot;high level&quot; overview, the following sections will cover each
            of the&lt;code&gt;Clojure CLI's&lt;/code&gt; subprograms.&lt;/p&gt;
            &lt;h3 id=&quot;clj%2Fclojure&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://betweentwoparens.com/blog/what-are-the-clojure-tools/#clj%2Fclojure&quot;&gt;clj/clojure&lt;/a&gt;&lt;/h3&gt;
            &lt;p&gt;As we see above, the &lt;code&gt;Clojure CLI&lt;/code&gt; is invoked by calling one of the two
            shell commands:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt;&lt;code&gt;clj&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;&lt;code&gt;clojure&lt;/code&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;When you read through the &lt;a href=&quot;https://clojure.org/guides/deps_and_cli&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Official Deps and CLI Guide&lt;/a&gt; you will see that you
            can use either &lt;code&gt;clj&lt;/code&gt; or &lt;code&gt;clojure&lt;/code&gt;.  &lt;code&gt;clj&lt;/code&gt; is the recommended version, but
            both are used.  Furthermore, when you start to look at open source code, you
            will see that both are used.&lt;/p&gt;
            &lt;p&gt;What's the difference between these two commands? &lt;code&gt;clj&lt;/code&gt; is &lt;em&gt;mainly&lt;/em&gt; used during
            development.  &lt;code&gt;clojure&lt;/code&gt; is &lt;em&gt;mainly&lt;/em&gt; used in
            a production or CI environment.  The reason for
            this is because &lt;code&gt;clj&lt;/code&gt; is a light wrapper around the &lt;code&gt;clojure&lt;/code&gt; command.&lt;/p&gt;
            &lt;p&gt;The &lt;code&gt;clj&lt;/code&gt; command wraps the &lt;code&gt;clojure&lt;/code&gt; command in another
            tool called &lt;a href=&quot;https://linux.die.net/man/1/rlwraps&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;rlwrap&lt;/a&gt;. &lt;code&gt;rlwrap&lt;/code&gt; improves the developer experience by making it
            easier to type in the terminal while you're running your Clojure REPL.&lt;/p&gt;
            &lt;p&gt;The tradeoff for the convenience provided by &lt;code&gt;clj&lt;/code&gt; is that &lt;code&gt;clj&lt;/code&gt; introduces
            dependencies. This is a tradeoff because you may not have access to &lt;code&gt;rlwrap&lt;/code&gt;
            in production. In addition, a tool like &lt;code&gt;rlwrap&lt;/code&gt; &lt;em&gt;can&lt;/em&gt; make it harder to
            compose the &lt;code&gt;clj&lt;/code&gt; command with other tools.  As a result, it's a common
            practice to use &lt;code&gt;clojure&lt;/code&gt; in production/ci environments
            &lt;a href=&quot;https://betweentwoparens.com/blog/what-are-the-clojure-tools/#when-to-use-clojure-script&quot; id=&quot;when-to-use-clojure-script-ref&quot;&gt;.&lt;/a&gt;&lt;/p&gt;
            &lt;p&gt;Now that we see they both more or less the same command, what do they do?
            &lt;code&gt;clj/clojure&lt;/code&gt; has one job:  run Clojure programs against a classpath.  If you
            dig into the &lt;code&gt;clj/clojure&lt;/code&gt; bash script you see that it ultimatley calls a
            command like this:&lt;/p&gt;
            &lt;div class=&quot;bride-highlight&quot;&gt; &lt;pre class=&quot;bride-code-bash&quot;&gt;&lt;code class=&quot;bride-code-bash&quot;&gt;java &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;java-opt*&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; -cp classpath clojure.main &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;init-opt*&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;main-opt&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;arg*&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
            &lt;p&gt;The above might look like a simple command, but the value of having
            &lt;code&gt;clj/clojure&lt;/code&gt; is that you as a new Clojure developer don't have to manually
            build the classpath, figure out the exact right Java command to run or
            work to make this execute on different environments (windows, linux, mac etc).&lt;/p&gt;
            &lt;p&gt;In summary, &lt;code&gt;clj/clojure&lt;/code&gt; is about running Clojure programs in a classpath and
            orchestrates other tools.  For example, in order to run against a classpath, there
            has to be a classpath.  &lt;code&gt;clj/clojure&lt;/code&gt; is not responsible for figuring out the
            &lt;code&gt;classpath&lt;/code&gt; though.  That's a job for &lt;code&gt;tools.deps.alpha&lt;/code&gt;&lt;/p&gt;
            &lt;h3 id=&quot;tools.deps.alpha&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://betweentwoparens.com/blog/what-are-the-clojure-tools/#tools.deps.alpha&quot;&gt;tools.deps.alpha&lt;/a&gt;&lt;/h3&gt;
            &lt;p&gt;&lt;code&gt;tools.deps.alpha&lt;/code&gt; is a Clojure libary responsible for managing your dependencies.
            What it does is:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt;reads in dependencies from a &lt;code&gt;deps.edn&lt;/code&gt; file&lt;/li&gt;
            &lt;li&gt;resolves the dependencies and their transitive dependencies&lt;/li&gt;
            &lt;li&gt;builds a classpath&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Note that I said it's a Clojure library.  You don't have to be using the
            &lt;code&gt;Clojure CLI&lt;/code&gt; in order to use this tool.  You can just use it by itself if you
            wanted to.&lt;/p&gt;
            &lt;aside class=&quot;blog-content__note&quot;&gt;&lt;p&gt;It's a good time to note that &lt;strong&gt;NEITHER&lt;/strong&gt; &lt;code&gt;clj/clojure&lt;/code&gt; or &lt;code&gt;tools.deps.alpha&lt;/code&gt; are
            &quot;building&quot; Clojure artifacts.  More on this later.&lt;/p&gt;
            &lt;/aside&gt;&lt;p&gt;What makes &lt;code&gt;tools.deps.alpha&lt;/code&gt; so great is that it's a small and focused library.
            There isn't much more to say about this other than if you want to learn more
            about the history, development and goals of the tool from the Clojure team
            I recommend listening to this episode of &lt;a href=&quot;https://soundcloud.com/user-959992602&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Clojure Weekly Podcast&lt;/a&gt;
            which features Alex Miller, the author of &lt;code&gt;tools.deps.alpha&lt;/code&gt;.&lt;/p&gt;
            &lt;p&gt;As noted above, the first thing &lt;code&gt;tools.deps.alpha&lt;/code&gt; is going to do is read in
            your project configuration and deps.  This information is stored in &lt;code&gt;deps.edn&lt;/code&gt;.&lt;/p&gt;
            &lt;h3 id=&quot;deps.edn&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://betweentwoparens.com/blog/what-are-the-clojure-tools/#deps.edn&quot;&gt;deps.edn&lt;/a&gt;&lt;/h3&gt;
            &lt;p&gt;The &lt;code&gt;deps.edn&lt;/code&gt; file is a Clojure map with a specific structure.  Thus, when
            you run &lt;code&gt;clj/clojure&lt;/code&gt; one of the first things it does is find a &lt;code&gt;deps.edn&lt;/code&gt; file
            and reads it in.&lt;/p&gt;
            &lt;p&gt;&lt;code&gt;deps.edn&lt;/code&gt; is where you configure your project and specify project dependencies.
            At it's heart, &lt;code&gt;deps.edn&lt;/code&gt; is just an &lt;a href=&quot;https://github.com/edn-format/edn&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;edn&lt;/a&gt; file.  You can think of it like
            Clojure's version of &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;
            &lt;p&gt;Here is an example of what a &lt;code&gt;deps.edn&lt;/code&gt; file looks like:&lt;/p&gt;
            &lt;div class=&quot;bride-highlight&quot;&gt; &lt;pre class=&quot;bride-code-clojure&quot;&gt;&lt;code class=&quot;bride-code-clojure&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:deps&lt;/span&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;...&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token symbol&quot;&gt;:paths&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;...&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;token symbol&quot;&gt;:aliases&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;...&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
            &lt;p&gt;As you can see, we use the keywords &lt;code&gt;:deps&lt;/code&gt;, &lt;code&gt;:paths&lt;/code&gt; and &lt;code&gt;:aliases&lt;/code&gt; and more
            to start to describe your project and the dependencies it requires.&lt;/p&gt;
            &lt;h2 id=&quot;tools.build&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://betweentwoparens.com/blog/what-are-the-clojure-tools/#tools.build&quot;&gt;Tools.Build&lt;/a&gt;&lt;/h2&gt;
            &lt;p&gt;This is the newest Clojure Tool.  It's been in the works for a while and might
            be the simplest to understand conceptually:  It's a Clojure library with
            functions that do things like build a &lt;code&gt;jar&lt;/code&gt;, &lt;code&gt;uberjar&lt;/code&gt; etc.&lt;/p&gt;
            &lt;p&gt;One distinction that's important to note is that &lt;code&gt;tools.build&lt;/code&gt; is not the same
            as the &lt;code&gt;Clojure CLI&lt;/code&gt; tool's &lt;code&gt;-T&lt;/code&gt; switch.  I am calling this out now because
            when &lt;code&gt;tools.build&lt;/code&gt; was released the &lt;code&gt;Clojure CLI&lt;/code&gt; was also enhanced to provide
            the &lt;code&gt;-T&lt;/code&gt; switch.  As one can imagine, this could be seen as confusing because
            of the similarity of their names.&lt;/p&gt;
            &lt;p&gt;The best way that I can &lt;em&gt;currently&lt;/em&gt; explain the &lt;code&gt;-T&lt;/code&gt; switch is by saying that
            it's meant to be another level of convenience provided by the &lt;code&gt;Clojure CLI&lt;/code&gt;.&lt;/p&gt;
            &lt;p&gt;Regarding usage, it helps to first breakdown the main types of Clojure
            programs one might build into 3 sub categories:&lt;/p&gt;
            &lt;ul&gt;
            &lt;li&gt;A &lt;code&gt;tool&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;A &lt;code&gt;library&lt;/code&gt;&lt;/li&gt;
            &lt;li&gt;An &lt;code&gt;app&lt;/code&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;You would use &lt;code&gt;-T&lt;/code&gt; for Clojure programs that you want to run as a &quot;tool&quot;.  For
            example, &lt;a href=&quot;https://github.com/seancorfield/deps-new&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;deps-new&lt;/a&gt; is a Clojure library which creates new Clojure projects
            based on a template you provide.  This is a great example of a Clojure project
            which is built to be a &quot;tool&quot;.&lt;/p&gt;
            &lt;p&gt;I don't want to go into more detail about &lt;code&gt;-T&lt;/code&gt; now because that means we would
            have to dive into other &lt;code&gt;Clojure CLI&lt;/code&gt; switches like &lt;code&gt;-X&lt;/code&gt; and &lt;code&gt;-M&lt;/code&gt;.  That's for
            another post. On to the Installer!&lt;/p&gt;
            &lt;h2 id=&quot;installer&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://betweentwoparens.com/blog/what-are-the-clojure-tools/#installer&quot;&gt;Installer&lt;/a&gt;&lt;/h2&gt;
            &lt;p&gt;The &quot;Clojure CLI Installer&quot; is a fancy way of referring to the &lt;code&gt;brew tap&lt;/code&gt; used
            to install Clojure on mac and linux machines. As of February 2020, Clojure
            started maintaining their own &lt;a href=&quot;https://clojure.org/news/2020/02/28/clojure-tap&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;brew tap&lt;/a&gt;.  Thus, if you installed the
            &lt;code&gt;Clojure CLI&lt;/code&gt; via&lt;/p&gt;
            &lt;div class=&quot;bride-highlight&quot;&gt; &lt;pre class=&quot;bride-code-bash&quot;&gt;&lt;code class=&quot;bride-code-bash&quot;&gt;brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; clojure
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
            &lt;p&gt;you will likely want to uninstall &lt;code&gt;clojure&lt;/code&gt; and install the following:&lt;/p&gt;
            &lt;div class=&quot;bride-highlight&quot;&gt; &lt;pre class=&quot;bride-code-bash&quot;&gt;&lt;code class=&quot;bride-code-bash&quot;&gt;brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; clojure/tools/clojure
            &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
            &lt;p&gt;In all likelihood, you would probably be fine with &lt;code&gt;brew install clojure&lt;/code&gt; as it
            will recieve updates.  However, while &lt;code&gt;brew install clojure&lt;/code&gt; will still see some
            love, it won't be as active as the &lt;code&gt;clojure/tools/clojure&lt;/code&gt; tap.&lt;/p&gt;
            &lt;h2 id=&quot;clj-v-lein-v-boot&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;https://betweentwoparens.com/blog/what-are-the-clojure-tools/#clj-v-lein-v-boot&quot;&gt;clj v lein v boot&lt;/a&gt;&lt;/h2&gt;
            &lt;p&gt;This section will provide a quick comparison of &lt;code&gt;clj&lt;/code&gt;, &lt;code&gt;lein&lt;/code&gt; and &lt;code&gt;boot&lt;/code&gt;.&lt;/p&gt;
            &lt;aside class=&quot;blog-content__note&quot;&gt;&lt;p&gt;I won't dive into the history, for this I recommend the blog post &lt;a href=&quot;https://corfield.org/blog/2018/04/18/all-the-paths/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;All the Paths&lt;/a&gt;
            by Sean Corfield.&lt;/p&gt;
            &lt;/aside&gt;&lt;p&gt;Firstly, all of the above tools are more or less addressing the same problems
            in their own way.  Your job is to choose the one you like best.&lt;/p&gt;
            &lt;aside class=&quot;blog-content__note&quot;&gt;&lt;p&gt;Understanding that you have to choose one should be a relief, but note that some
            people have experimented
            with combining these tools.  Specifically, combining &lt;code&gt;Clojure CLI&lt;/code&gt; and &lt;code&gt;lein&lt;/code&gt;.
            Here is an example of &lt;a href=&quot;https://github.com/oakes/full-stack-clj-example&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;clj calling to lein&lt;/a&gt;.  This was desireable years ago
            because the &lt;code&gt;Clojure CLI&lt;/code&gt; didn't cover building CLJ artifacts.  Having
            said this, there isn't a need to do this anymore because you have libraries like
            &lt;a href=&quot;https://github.com/seancorfield/depstar&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;depstar&lt;/a&gt; which handle the &quot;build&quot; story.  In addition, you have &lt;code&gt;tools.build&lt;/code&gt;
            which is Clojure's official answer to the build question.&lt;/p&gt;
            &lt;/aside&gt;&lt;p&gt;If you're curious which to choose, my answer is the &lt;code&gt;Clojure CLI&lt;/code&gt;.
            The reason I like the &lt;code&gt;Clojure CLI&lt;/code&gt; is because the tool is simple.
            You can read through &lt;code&gt;clj&lt;/code&gt; and &lt;code&gt;tools.deps.alpha&lt;/code&gt; in an afternoon and understand
            what they are doing if you had to.  The same (subjectively of course) cannot be
            said for &lt;code&gt;lein&lt;/code&gt; or &lt;code&gt;boot&lt;/code&gt;.  This is not just implementation, but also usage.
            Yes, &lt;code&gt;lein&lt;/code&gt; seems easier to start, but the moment you break away from the
            beginner examples you are left deeps in the woods without a compass.&lt;/p&gt;
            &lt;p&gt;Secondly, the &lt;code&gt;Clojure Tools&lt;/code&gt; promote libraries over frameworks.  This is
            important when working with a language like Clojure because it really does
            reward you for breaking down your thinking.&lt;/p&gt;
            &lt;p&gt;Finally, the Clojure community is really leaning into
            building tools for &lt;code&gt;Clojure CLI&lt;/code&gt;.  For example, where &lt;code&gt;lein&lt;/code&gt; used to have significantly
            more functionality, the community has built a ton of &lt;a href=&quot;https://github.com/clojure/tools.deps.alpha/wiki/Tools&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;incredible tools&lt;/a&gt; that
            will cover many of your essential requirements.&lt;/p&gt;
            &lt;p&gt;So yes, &lt;code&gt;Clojure Tools&lt;/code&gt; for the win.&lt;/p&gt;
            &lt;aside class=&quot;footnote-container&quot;&gt;&lt;h3&gt;Footnotes&lt;/h3&gt;&lt;ol&gt;&lt;li id=&quot;cli-tool-v-dev-tools&quot;&gt;&lt;p&gt;In earlier versions of this blog post I referred to the &lt;code&gt;Clojure CLI&lt;/code&gt; as
            &lt;code&gt;Clojure Tools&lt;/code&gt;.  The reason I now refer to them as the &quot;Clojure CLI&quot; is
            because on August 21, 2020 it was announced in Clojurians (The official Clojure Slack Org)
            that cognitect released a free set of tools called &lt;a href=&quot;https://cognitect.com/dev-tools/index.html&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Cognitect Dev Tools&lt;/a&gt;.
            Thus, I made the change to be very clear that there is a difference.&lt;/p&gt;
            &lt;a href=&quot;https://betweentwoparens.com/blog/what-are-the-clojure-tools/#cli-tool-v-dev-tools-ref&quot;&gt;Back&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;when-to-use-clojure-script&quot;&gt;&lt;p&gt;Of course, production scripts are not the only times you would want to use the
            &lt;code&gt;clojure&lt;/code&gt; command.  Other times include when you are combining it with other tools
            e.g. emacs.  In general, if you are finding the &lt;code&gt;clj&lt;/code&gt; command is causing some
            headaches when composing tools, give &lt;code&gt;clojure&lt;/code&gt; a try.  Thanks, sogaiu for the tip!&lt;/p&gt;
            &lt;a href=&quot;https://betweentwoparens.com/blog/what-are-the-clojure-tools/#when-to-use-clojure-script-ref&quot;&gt;Back&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;monorepo-comment&quot;&gt;&lt;p&gt;To clarify the &quot;monorepo&quot; comment: Choosing a sane structure for your monorepo
            is important to making this work.  I have a personal project which has 4 or 5
            sub-projects and I have not run into any issues as of yet.  I would eventually
            love to write about my approach, but until then checkout Sean Corfield's Blog
            Post about &lt;a href=&quot;https://corfield.org/blog/2021/02/23/deps-edn-monorepo/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Clojure Monorepo using Clojure CLI Tools&lt;/a&gt;.&lt;/p&gt;
            &lt;a href=&quot;https://betweentwoparens.com/blog/what-are-the-clojure-tools/#monorepo-comment-ref&quot;&gt;Back&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/aside&gt;</content>
        <author>
            <name>Thomas Mattacchione</name>
            <uri>https://betweentwoparens.com</uri>
        </author>
        <source>
            <title type="html">Between Two Parens</title>
            <subtitle type="html">A blog about life between two parens.</subtitle>
            <link rel="self" href="https://betweentwoparens.com/feed.xml"/>
            <id>https://betweentwoparens.com</id>
        </source>
    </entry>

</feed>
